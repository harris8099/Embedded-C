
002SampleApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08001764  08001764  00002764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018a0  080018a0  000030a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080018a0  080018a0  000028a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080018a8  080018a8  000030a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018a8  080018a8  000028a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080018ac  080018ac  000028ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  080018b0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000030a4  2**0
                  CONTENTS
 10 .bss          0000016c  200000a4  200000a4  000030a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000210  20000210  000030a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000030a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000afd  00000000  00000000  000030d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003eb  00000000  00000000  00003bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  00003fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000de  00000000  00000000  00004100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c61  00000000  00000000  000041de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015e2  00000000  00000000  00006e3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000099d5  00000000  00000000  00008421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011df6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e80  00000000  00000000  00011e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00012cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800174c 	.word	0x0800174c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	0800174c 	.word	0x0800174c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <array_fill_numbers>:
int numbers[] = { 456,345,678,567,890,456,3456,123,765,456,896,456,678,987,000,145,90};

int  someData = 90;

void array_fill_numbers(int pNumbers[], unsigned int len)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]

    for ( unsigned int i = 0 ; i < len ; i++)
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	e015      	b.n	80002ac <array_fill_numbers+0x3c>
    {
        pNumbers[i] = rand() % 1000;
 8000280:	f000 fa38 	bl	80006f4 <rand>
 8000284:	4602      	mov	r2, r0
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	009b      	lsls	r3, r3, #2
 800028a:	6879      	ldr	r1, [r7, #4]
 800028c:	4419      	add	r1, r3
 800028e:	4b0c      	ldr	r3, [pc, #48]	@ (80002c0 <array_fill_numbers+0x50>)
 8000290:	fb83 0302 	smull	r0, r3, r3, r2
 8000294:	1198      	asrs	r0, r3, #6
 8000296:	17d3      	asrs	r3, r2, #31
 8000298:	1ac3      	subs	r3, r0, r3
 800029a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800029e:	fb00 f303 	mul.w	r3, r0, r3
 80002a2:	1ad3      	subs	r3, r2, r3
 80002a4:	600b      	str	r3, [r1, #0]
    for ( unsigned int i = 0 ; i < len ; i++)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	3301      	adds	r3, #1
 80002aa:	60fb      	str	r3, [r7, #12]
 80002ac:	68fa      	ldr	r2, [r7, #12]
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d3e5      	bcc.n	8000280 <array_fill_numbers+0x10>
    }

}
 80002b4:	bf00      	nop
 80002b6:	bf00      	nop
 80002b8:	3710      	adds	r7, #16
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	10624dd3 	.word	0x10624dd3

080002c4 <display_numbers>:

void display_numbers(int *pNumbers, unsigned int len, char *pMessage)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
    printf("%s",pMessage);
 80002d0:	6879      	ldr	r1, [r7, #4]
 80002d2:	480e      	ldr	r0, [pc, #56]	@ (800030c <display_numbers+0x48>)
 80002d4:	f000 fb0e 	bl	80008f4 <iprintf>

    for (unsigned i = 0 ; i < len ; i++)
 80002d8:	2300      	movs	r3, #0
 80002da:	617b      	str	r3, [r7, #20]
 80002dc:	e00b      	b.n	80002f6 <display_numbers+0x32>
    {
        printf("%5d  ",pNumbers[i]);
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	4413      	add	r3, r2
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4619      	mov	r1, r3
 80002ea:	4809      	ldr	r0, [pc, #36]	@ (8000310 <display_numbers+0x4c>)
 80002ec:	f000 fb02 	bl	80008f4 <iprintf>
    for (unsigned i = 0 ; i < len ; i++)
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	3301      	adds	r3, #1
 80002f4:	617b      	str	r3, [r7, #20]
 80002f6:	697a      	ldr	r2, [r7, #20]
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d3ef      	bcc.n	80002de <display_numbers+0x1a>
    }

    printf("\n");
 80002fe:	200a      	movs	r0, #10
 8000300:	f000 fb0a 	bl	8000918 <putchar>
}
 8000304:	bf00      	nop
 8000306:	3718      	adds	r7, #24
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	08001764 	.word	0x08001764
 8000310:	08001768 	.word	0x08001768

08000314 <swap_numbers>:


void swap_numbers(int *x,int *y)
{
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	6039      	str	r1, [r7, #0]
     int temp=*x;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	60fb      	str	r3, [r7, #12]
     *x=*y;
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	601a      	str	r2, [r3, #0]
     *y=temp;
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	68fa      	ldr	r2, [r7, #12]
 8000330:	601a      	str	r2, [r3, #0]
     void (*jump_addr) (void);
     jump_addr = (void*)0x20000009;
     jump_addr();
#endif

     someData = 10;
 8000332:	4b04      	ldr	r3, [pc, #16]	@ (8000344 <swap_numbers+0x30>)
 8000334:	220a      	movs	r2, #10
 8000336:	601a      	str	r2, [r3, #0]
}
 8000338:	bf00      	nop
 800033a:	3714      	adds	r7, #20
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	20000044 	.word	0x20000044

08000348 <bubble_sort>:


void bubble_sort(int *pNumbers , unsigned int len)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	6039      	str	r1, [r7, #0]

    int i,j,flag=0;
 8000352:	2300      	movs	r3, #0
 8000354:	60fb      	str	r3, [r7, #12]

    for(i=0;i<len-1;i++)
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]
 800035a:	e02f      	b.n	80003bc <bubble_sort+0x74>
    {
        flag=0;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]

        for(j=0;j<len-1-i;j++)
 8000360:	2300      	movs	r3, #0
 8000362:	613b      	str	r3, [r7, #16]
 8000364:	e01d      	b.n	80003a2 <bubble_sort+0x5a>
        {
            if(pNumbers[j] > pNumbers[j+1])
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	4413      	add	r3, r2
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	693b      	ldr	r3, [r7, #16]
 8000372:	3301      	adds	r3, #1
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	6879      	ldr	r1, [r7, #4]
 8000378:	440b      	add	r3, r1
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	429a      	cmp	r2, r3
 800037e:	dd0d      	ble.n	800039c <bubble_sort+0x54>
            {
                swap_numbers(&pNumbers[j],&pNumbers[j+1]);
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	18d0      	adds	r0, r2, r3
 8000388:	693b      	ldr	r3, [r7, #16]
 800038a:	3301      	adds	r3, #1
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	4413      	add	r3, r2
 8000392:	4619      	mov	r1, r3
 8000394:	f7ff ffbe 	bl	8000314 <swap_numbers>
                flag=1;
 8000398:	2301      	movs	r3, #1
 800039a:	60fb      	str	r3, [r7, #12]
        for(j=0;j<len-1-i;j++)
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	3301      	adds	r3, #1
 80003a0:	613b      	str	r3, [r7, #16]
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	683a      	ldr	r2, [r7, #0]
 80003a6:	1ad3      	subs	r3, r2, r3
 80003a8:	1e5a      	subs	r2, r3, #1
 80003aa:	693b      	ldr	r3, [r7, #16]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d8da      	bhi.n	8000366 <bubble_sort+0x1e>
            }
        }

        if(flag==0)
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d008      	beq.n	80003c8 <bubble_sort+0x80>
    for(i=0;i<len-1;i++)
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	3301      	adds	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	1e5a      	subs	r2, r3, #1
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d8ca      	bhi.n	800035c <bubble_sort+0x14>
            break;
    }
}
 80003c6:	e000      	b.n	80003ca <bubble_sort+0x82>
            break;
 80003c8:	bf00      	nop
}
 80003ca:	bf00      	nop
 80003cc:	3718      	adds	r7, #24
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <insertion_sort>:

void insertion_sort(int *pNumbers , unsigned int len)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b087      	sub	sp, #28
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	6039      	str	r1, [r7, #0]

     int i,j,num;

     for(i=1 ; i<len ; i++)
 80003dc:	2301      	movs	r3, #1
 80003de:	617b      	str	r3, [r7, #20]
 80003e0:	e02c      	b.n	800043c <insertion_sort+0x6a>
     {
         j=i-1;
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	3b01      	subs	r3, #1
 80003e6:	613b      	str	r3, [r7, #16]

         num = pNumbers[i];
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	4413      	add	r3, r2
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	60fb      	str	r3, [r7, #12]

         while( (j>-1) && (pNumbers[j] > num) )
 80003f4:	e00d      	b.n	8000412 <insertion_sort+0x40>
         {
             pNumbers[j+1] = pNumbers[j];
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	441a      	add	r2, r3
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	3301      	adds	r3, #1
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	6879      	ldr	r1, [r7, #4]
 8000406:	440b      	add	r3, r1
 8000408:	6812      	ldr	r2, [r2, #0]
 800040a:	601a      	str	r2, [r3, #0]
             j--;
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	3b01      	subs	r3, #1
 8000410:	613b      	str	r3, [r7, #16]
         while( (j>-1) && (pNumbers[j] > num) )
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	2b00      	cmp	r3, #0
 8000416:	db07      	blt.n	8000428 <insertion_sort+0x56>
 8000418:	693b      	ldr	r3, [r7, #16]
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	4413      	add	r3, r2
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	429a      	cmp	r2, r3
 8000426:	dbe6      	blt.n	80003f6 <insertion_sort+0x24>
         }

         pNumbers[j+1]=num;
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	3301      	adds	r3, #1
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	4413      	add	r3, r2
 8000432:	68fa      	ldr	r2, [r7, #12]
 8000434:	601a      	str	r2, [r3, #0]
     for(i=1 ; i<len ; i++)
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	3301      	adds	r3, #1
 800043a:	617b      	str	r3, [r7, #20]
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	683a      	ldr	r2, [r7, #0]
 8000440:	429a      	cmp	r2, r3
 8000442:	d8ce      	bhi.n	80003e2 <insertion_sort+0x10>
     }


}
 8000444:	bf00      	nop
 8000446:	bf00      	nop
 8000448:	371c      	adds	r7, #28
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
	...

08000454 <main>:



int main()
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0

    unsigned int len = sizeof(numbers)/sizeof(int);
 800045a:	2311      	movs	r3, #17
 800045c:	607b      	str	r3, [r7, #4]

    array_fill_numbers(numbers,len);
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	4813      	ldr	r0, [pc, #76]	@ (80004b0 <main+0x5c>)
 8000462:	f7ff ff05 	bl	8000270 <array_fill_numbers>

    display_numbers(numbers,len,"B-unsorted array :");
 8000466:	4a13      	ldr	r2, [pc, #76]	@ (80004b4 <main+0x60>)
 8000468:	6879      	ldr	r1, [r7, #4]
 800046a:	4811      	ldr	r0, [pc, #68]	@ (80004b0 <main+0x5c>)
 800046c:	f7ff ff2a 	bl	80002c4 <display_numbers>

    bubble_sort(numbers,len);
 8000470:	6879      	ldr	r1, [r7, #4]
 8000472:	480f      	ldr	r0, [pc, #60]	@ (80004b0 <main+0x5c>)
 8000474:	f7ff ff68 	bl	8000348 <bubble_sort>

    display_numbers(numbers,len,"B-sorted array   :");
 8000478:	4a0f      	ldr	r2, [pc, #60]	@ (80004b8 <main+0x64>)
 800047a:	6879      	ldr	r1, [r7, #4]
 800047c:	480c      	ldr	r0, [pc, #48]	@ (80004b0 <main+0x5c>)
 800047e:	f7ff ff21 	bl	80002c4 <display_numbers>

    array_fill_numbers(numbers,len);
 8000482:	6879      	ldr	r1, [r7, #4]
 8000484:	480a      	ldr	r0, [pc, #40]	@ (80004b0 <main+0x5c>)
 8000486:	f7ff fef3 	bl	8000270 <array_fill_numbers>

    display_numbers(numbers,len,"I-unsorted array :");
 800048a:	4a0c      	ldr	r2, [pc, #48]	@ (80004bc <main+0x68>)
 800048c:	6879      	ldr	r1, [r7, #4]
 800048e:	4808      	ldr	r0, [pc, #32]	@ (80004b0 <main+0x5c>)
 8000490:	f7ff ff18 	bl	80002c4 <display_numbers>

    insertion_sort(numbers,len);
 8000494:	6879      	ldr	r1, [r7, #4]
 8000496:	4806      	ldr	r0, [pc, #24]	@ (80004b0 <main+0x5c>)
 8000498:	f7ff ff9b 	bl	80003d2 <insertion_sort>

    display_numbers(numbers,len,"I-sorted array   :");
 800049c:	4a08      	ldr	r2, [pc, #32]	@ (80004c0 <main+0x6c>)
 800049e:	6879      	ldr	r1, [r7, #4]
 80004a0:	4803      	ldr	r0, [pc, #12]	@ (80004b0 <main+0x5c>)
 80004a2:	f7ff ff0f 	bl	80002c4 <display_numbers>



    return 0;
 80004a6:	2300      	movs	r3, #0
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000000 	.word	0x20000000
 80004b4:	08001770 	.word	0x08001770
 80004b8:	08001784 	.word	0x08001784
 80004bc:	08001798 	.word	0x08001798
 80004c0:	080017ac 	.word	0x080017ac

080004c4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004ce:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <ITM_SendChar+0x48>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a0e      	ldr	r2, [pc, #56]	@ (800050c <ITM_SendChar+0x48>)
 80004d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004d8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004da:	4b0d      	ldr	r3, [pc, #52]	@ (8000510 <ITM_SendChar+0x4c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a0c      	ldr	r2, [pc, #48]	@ (8000510 <ITM_SendChar+0x4c>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004e6:	bf00      	nop
 80004e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0f8      	beq.n	80004e8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004f6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	6013      	str	r3, [r2, #0]
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e000edfc 	.word	0xe000edfc
 8000510:	e0000e00 	.word	0xe0000e00

08000514 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  return 1;
 8000518:	2301      	movs	r3, #1
}
 800051a:	4618      	mov	r0, r3
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <_kill>:

int _kill(int pid, int sig)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800052e:	f000 fa8d 	bl	8000a4c <__errno>
 8000532:	4603      	mov	r3, r0
 8000534:	2216      	movs	r2, #22
 8000536:	601a      	str	r2, [r3, #0]
  return -1;
 8000538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800053c:	4618      	mov	r0, r3
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <_exit>:

void _exit (int status)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800054c:	f04f 31ff 	mov.w	r1, #4294967295
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f7ff ffe7 	bl	8000524 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000556:	bf00      	nop
 8000558:	e7fd      	b.n	8000556 <_exit+0x12>

0800055a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b086      	sub	sp, #24
 800055e:	af00      	add	r7, sp, #0
 8000560:	60f8      	str	r0, [r7, #12]
 8000562:	60b9      	str	r1, [r7, #8]
 8000564:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
 800056a:	e00a      	b.n	8000582 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800056c:	f3af 8000 	nop.w
 8000570:	4601      	mov	r1, r0
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	1c5a      	adds	r2, r3, #1
 8000576:	60ba      	str	r2, [r7, #8]
 8000578:	b2ca      	uxtb	r2, r1
 800057a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	3301      	adds	r3, #1
 8000580:	617b      	str	r3, [r7, #20]
 8000582:	697a      	ldr	r2, [r7, #20]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	429a      	cmp	r2, r3
 8000588:	dbf0      	blt.n	800056c <_read+0x12>
  }

  return len;
 800058a:	687b      	ldr	r3, [r7, #4]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3718      	adds	r7, #24
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	e009      	b.n	80005ba <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	1c5a      	adds	r2, r3, #1
 80005aa:	60ba      	str	r2, [r7, #8]
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff88 	bl	80004c4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	3301      	adds	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	697a      	ldr	r2, [r7, #20]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	429a      	cmp	r2, r3
 80005c0:	dbf1      	blt.n	80005a6 <_write+0x12>

  }
  return len;
 80005c2:	687b      	ldr	r3, [r7, #4]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3718      	adds	r7, #24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <_close>:

int _close(int file)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005f4:	605a      	str	r2, [r3, #4]
  return 0;
 80005f6:	2300      	movs	r3, #0
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <_isatty>:

int _isatty(int file)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800060c:	2301      	movs	r3, #1
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800061a:	b480      	push	{r7}
 800061c:	b085      	sub	sp, #20
 800061e:	af00      	add	r7, sp, #0
 8000620:	60f8      	str	r0, [r7, #12]
 8000622:	60b9      	str	r1, [r7, #8]
 8000624:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000626:	2300      	movs	r3, #0
}
 8000628:	4618      	mov	r0, r3
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800063c:	4a14      	ldr	r2, [pc, #80]	@ (8000690 <_sbrk+0x5c>)
 800063e:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <_sbrk+0x60>)
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000648:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <_sbrk+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d102      	bne.n	8000656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000650:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <_sbrk+0x64>)
 8000652:	4a12      	ldr	r2, [pc, #72]	@ (800069c <_sbrk+0x68>)
 8000654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000656:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <_sbrk+0x64>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	693a      	ldr	r2, [r7, #16]
 8000660:	429a      	cmp	r2, r3
 8000662:	d207      	bcs.n	8000674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000664:	f000 f9f2 	bl	8000a4c <__errno>
 8000668:	4603      	mov	r3, r0
 800066a:	220c      	movs	r2, #12
 800066c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	e009      	b.n	8000688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000674:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <_sbrk+0x64>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800067a:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <_sbrk+0x64>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	4a05      	ldr	r2, [pc, #20]	@ (8000698 <_sbrk+0x64>)
 8000684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20020000 	.word	0x20020000
 8000694:	00000400 	.word	0x00000400
 8000698:	200000c0 	.word	0x200000c0
 800069c:	20000210 	.word	0x20000210

080006a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a0:	480d      	ldr	r0, [pc, #52]	@ (80006d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480c      	ldr	r0, [pc, #48]	@ (80006dc <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490d      	ldr	r1, [pc, #52]	@ (80006e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0d      	ldr	r2, [pc, #52]	@ (80006e4 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	@ (80006e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0a      	ldr	r4, [pc, #40]	@ (80006ec <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ce:	f000 f9c3 	bl	8000a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d2:	f7ff febf 	bl	8000454 <main>

080006d6 <LoopForever>:

LoopForever:
  b LoopForever
 80006d6:	e7fe      	b.n	80006d6 <LoopForever>
  ldr   r0, =_estack
 80006d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80006e4:	080018b0 	.word	0x080018b0
  ldr r2, =_sbss
 80006e8:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80006ec:	20000210 	.word	0x20000210

080006f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC_IRQHandler>
	...

080006f4 <rand>:
 80006f4:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <rand+0x5c>)
 80006f6:	b510      	push	{r4, lr}
 80006f8:	681c      	ldr	r4, [r3, #0]
 80006fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80006fc:	b9b3      	cbnz	r3, 800072c <rand+0x38>
 80006fe:	2018      	movs	r0, #24
 8000700:	f000 fa3a 	bl	8000b78 <malloc>
 8000704:	4602      	mov	r2, r0
 8000706:	6320      	str	r0, [r4, #48]	@ 0x30
 8000708:	b920      	cbnz	r0, 8000714 <rand+0x20>
 800070a:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <rand+0x60>)
 800070c:	4812      	ldr	r0, [pc, #72]	@ (8000758 <rand+0x64>)
 800070e:	2152      	movs	r1, #82	@ 0x52
 8000710:	f000 f9ca 	bl	8000aa8 <__assert_func>
 8000714:	4911      	ldr	r1, [pc, #68]	@ (800075c <rand+0x68>)
 8000716:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <rand+0x6c>)
 8000718:	e9c0 1300 	strd	r1, r3, [r0]
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <rand+0x70>)
 800071e:	6083      	str	r3, [r0, #8]
 8000720:	230b      	movs	r3, #11
 8000722:	8183      	strh	r3, [r0, #12]
 8000724:	2100      	movs	r1, #0
 8000726:	2001      	movs	r0, #1
 8000728:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800072c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800072e:	480e      	ldr	r0, [pc, #56]	@ (8000768 <rand+0x74>)
 8000730:	690b      	ldr	r3, [r1, #16]
 8000732:	694c      	ldr	r4, [r1, #20]
 8000734:	4a0d      	ldr	r2, [pc, #52]	@ (800076c <rand+0x78>)
 8000736:	4358      	muls	r0, r3
 8000738:	fb02 0004 	mla	r0, r2, r4, r0
 800073c:	fba3 3202 	umull	r3, r2, r3, r2
 8000740:	3301      	adds	r3, #1
 8000742:	eb40 0002 	adc.w	r0, r0, r2
 8000746:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800074a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800074e:	bd10      	pop	{r4, pc}
 8000750:	20000054 	.word	0x20000054
 8000754:	080017bf 	.word	0x080017bf
 8000758:	080017d6 	.word	0x080017d6
 800075c:	abcd330e 	.word	0xabcd330e
 8000760:	e66d1234 	.word	0xe66d1234
 8000764:	0005deec 	.word	0x0005deec
 8000768:	5851f42d 	.word	0x5851f42d
 800076c:	4c957f2d 	.word	0x4c957f2d

08000770 <std>:
 8000770:	2300      	movs	r3, #0
 8000772:	b510      	push	{r4, lr}
 8000774:	4604      	mov	r4, r0
 8000776:	e9c0 3300 	strd	r3, r3, [r0]
 800077a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800077e:	6083      	str	r3, [r0, #8]
 8000780:	8181      	strh	r1, [r0, #12]
 8000782:	6643      	str	r3, [r0, #100]	@ 0x64
 8000784:	81c2      	strh	r2, [r0, #14]
 8000786:	6183      	str	r3, [r0, #24]
 8000788:	4619      	mov	r1, r3
 800078a:	2208      	movs	r2, #8
 800078c:	305c      	adds	r0, #92	@ 0x5c
 800078e:	f000 f90e 	bl	80009ae <memset>
 8000792:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <std+0x58>)
 8000794:	6263      	str	r3, [r4, #36]	@ 0x24
 8000796:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <std+0x5c>)
 8000798:	62a3      	str	r3, [r4, #40]	@ 0x28
 800079a:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <std+0x60>)
 800079c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800079e:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <std+0x64>)
 80007a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80007a2:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <std+0x68>)
 80007a4:	6224      	str	r4, [r4, #32]
 80007a6:	429c      	cmp	r4, r3
 80007a8:	d006      	beq.n	80007b8 <std+0x48>
 80007aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80007ae:	4294      	cmp	r4, r2
 80007b0:	d002      	beq.n	80007b8 <std+0x48>
 80007b2:	33d0      	adds	r3, #208	@ 0xd0
 80007b4:	429c      	cmp	r4, r3
 80007b6:	d105      	bne.n	80007c4 <std+0x54>
 80007b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80007bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007c0:	f000 b96e 	b.w	8000aa0 <__retarget_lock_init_recursive>
 80007c4:	bd10      	pop	{r4, pc}
 80007c6:	bf00      	nop
 80007c8:	08000929 	.word	0x08000929
 80007cc:	0800094b 	.word	0x0800094b
 80007d0:	08000983 	.word	0x08000983
 80007d4:	080009a7 	.word	0x080009a7
 80007d8:	200000c4 	.word	0x200000c4

080007dc <stdio_exit_handler>:
 80007dc:	4a02      	ldr	r2, [pc, #8]	@ (80007e8 <stdio_exit_handler+0xc>)
 80007de:	4903      	ldr	r1, [pc, #12]	@ (80007ec <stdio_exit_handler+0x10>)
 80007e0:	4803      	ldr	r0, [pc, #12]	@ (80007f0 <stdio_exit_handler+0x14>)
 80007e2:	f000 b869 	b.w	80008b8 <_fwalk_sglue>
 80007e6:	bf00      	nop
 80007e8:	20000048 	.word	0x20000048
 80007ec:	08001389 	.word	0x08001389
 80007f0:	20000058 	.word	0x20000058

080007f4 <cleanup_stdio>:
 80007f4:	6841      	ldr	r1, [r0, #4]
 80007f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <cleanup_stdio+0x34>)
 80007f8:	4299      	cmp	r1, r3
 80007fa:	b510      	push	{r4, lr}
 80007fc:	4604      	mov	r4, r0
 80007fe:	d001      	beq.n	8000804 <cleanup_stdio+0x10>
 8000800:	f000 fdc2 	bl	8001388 <_fflush_r>
 8000804:	68a1      	ldr	r1, [r4, #8]
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <cleanup_stdio+0x38>)
 8000808:	4299      	cmp	r1, r3
 800080a:	d002      	beq.n	8000812 <cleanup_stdio+0x1e>
 800080c:	4620      	mov	r0, r4
 800080e:	f000 fdbb 	bl	8001388 <_fflush_r>
 8000812:	68e1      	ldr	r1, [r4, #12]
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <cleanup_stdio+0x3c>)
 8000816:	4299      	cmp	r1, r3
 8000818:	d004      	beq.n	8000824 <cleanup_stdio+0x30>
 800081a:	4620      	mov	r0, r4
 800081c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000820:	f000 bdb2 	b.w	8001388 <_fflush_r>
 8000824:	bd10      	pop	{r4, pc}
 8000826:	bf00      	nop
 8000828:	200000c4 	.word	0x200000c4
 800082c:	2000012c 	.word	0x2000012c
 8000830:	20000194 	.word	0x20000194

08000834 <global_stdio_init.part.0>:
 8000834:	b510      	push	{r4, lr}
 8000836:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <global_stdio_init.part.0+0x30>)
 8000838:	4c0b      	ldr	r4, [pc, #44]	@ (8000868 <global_stdio_init.part.0+0x34>)
 800083a:	4a0c      	ldr	r2, [pc, #48]	@ (800086c <global_stdio_init.part.0+0x38>)
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	4620      	mov	r0, r4
 8000840:	2200      	movs	r2, #0
 8000842:	2104      	movs	r1, #4
 8000844:	f7ff ff94 	bl	8000770 <std>
 8000848:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800084c:	2201      	movs	r2, #1
 800084e:	2109      	movs	r1, #9
 8000850:	f7ff ff8e 	bl	8000770 <std>
 8000854:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000858:	2202      	movs	r2, #2
 800085a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800085e:	2112      	movs	r1, #18
 8000860:	f7ff bf86 	b.w	8000770 <std>
 8000864:	200001fc 	.word	0x200001fc
 8000868:	200000c4 	.word	0x200000c4
 800086c:	080007dd 	.word	0x080007dd

08000870 <__sfp_lock_acquire>:
 8000870:	4801      	ldr	r0, [pc, #4]	@ (8000878 <__sfp_lock_acquire+0x8>)
 8000872:	f000 b916 	b.w	8000aa2 <__retarget_lock_acquire_recursive>
 8000876:	bf00      	nop
 8000878:	20000205 	.word	0x20000205

0800087c <__sfp_lock_release>:
 800087c:	4801      	ldr	r0, [pc, #4]	@ (8000884 <__sfp_lock_release+0x8>)
 800087e:	f000 b911 	b.w	8000aa4 <__retarget_lock_release_recursive>
 8000882:	bf00      	nop
 8000884:	20000205 	.word	0x20000205

08000888 <__sinit>:
 8000888:	b510      	push	{r4, lr}
 800088a:	4604      	mov	r4, r0
 800088c:	f7ff fff0 	bl	8000870 <__sfp_lock_acquire>
 8000890:	6a23      	ldr	r3, [r4, #32]
 8000892:	b11b      	cbz	r3, 800089c <__sinit+0x14>
 8000894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000898:	f7ff bff0 	b.w	800087c <__sfp_lock_release>
 800089c:	4b04      	ldr	r3, [pc, #16]	@ (80008b0 <__sinit+0x28>)
 800089e:	6223      	str	r3, [r4, #32]
 80008a0:	4b04      	ldr	r3, [pc, #16]	@ (80008b4 <__sinit+0x2c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1f5      	bne.n	8000894 <__sinit+0xc>
 80008a8:	f7ff ffc4 	bl	8000834 <global_stdio_init.part.0>
 80008ac:	e7f2      	b.n	8000894 <__sinit+0xc>
 80008ae:	bf00      	nop
 80008b0:	080007f5 	.word	0x080007f5
 80008b4:	200001fc 	.word	0x200001fc

080008b8 <_fwalk_sglue>:
 80008b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008bc:	4607      	mov	r7, r0
 80008be:	4688      	mov	r8, r1
 80008c0:	4614      	mov	r4, r2
 80008c2:	2600      	movs	r6, #0
 80008c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008c8:	f1b9 0901 	subs.w	r9, r9, #1
 80008cc:	d505      	bpl.n	80008da <_fwalk_sglue+0x22>
 80008ce:	6824      	ldr	r4, [r4, #0]
 80008d0:	2c00      	cmp	r4, #0
 80008d2:	d1f7      	bne.n	80008c4 <_fwalk_sglue+0xc>
 80008d4:	4630      	mov	r0, r6
 80008d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008da:	89ab      	ldrh	r3, [r5, #12]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d907      	bls.n	80008f0 <_fwalk_sglue+0x38>
 80008e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008e4:	3301      	adds	r3, #1
 80008e6:	d003      	beq.n	80008f0 <_fwalk_sglue+0x38>
 80008e8:	4629      	mov	r1, r5
 80008ea:	4638      	mov	r0, r7
 80008ec:	47c0      	blx	r8
 80008ee:	4306      	orrs	r6, r0
 80008f0:	3568      	adds	r5, #104	@ 0x68
 80008f2:	e7e9      	b.n	80008c8 <_fwalk_sglue+0x10>

080008f4 <iprintf>:
 80008f4:	b40f      	push	{r0, r1, r2, r3}
 80008f6:	b507      	push	{r0, r1, r2, lr}
 80008f8:	4906      	ldr	r1, [pc, #24]	@ (8000914 <iprintf+0x20>)
 80008fa:	ab04      	add	r3, sp, #16
 80008fc:	6808      	ldr	r0, [r1, #0]
 80008fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8000902:	6881      	ldr	r1, [r0, #8]
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	f000 fa17 	bl	8000d38 <_vfiprintf_r>
 800090a:	b003      	add	sp, #12
 800090c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000910:	b004      	add	sp, #16
 8000912:	4770      	bx	lr
 8000914:	20000054 	.word	0x20000054

08000918 <putchar>:
 8000918:	4b02      	ldr	r3, [pc, #8]	@ (8000924 <putchar+0xc>)
 800091a:	4601      	mov	r1, r0
 800091c:	6818      	ldr	r0, [r3, #0]
 800091e:	6882      	ldr	r2, [r0, #8]
 8000920:	f000 bd6c 	b.w	80013fc <_putc_r>
 8000924:	20000054 	.word	0x20000054

08000928 <__sread>:
 8000928:	b510      	push	{r4, lr}
 800092a:	460c      	mov	r4, r1
 800092c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000930:	f000 f868 	bl	8000a04 <_read_r>
 8000934:	2800      	cmp	r0, #0
 8000936:	bfab      	itete	ge
 8000938:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800093a:	89a3      	ldrhlt	r3, [r4, #12]
 800093c:	181b      	addge	r3, r3, r0
 800093e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000942:	bfac      	ite	ge
 8000944:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000946:	81a3      	strhlt	r3, [r4, #12]
 8000948:	bd10      	pop	{r4, pc}

0800094a <__swrite>:
 800094a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800094e:	461f      	mov	r7, r3
 8000950:	898b      	ldrh	r3, [r1, #12]
 8000952:	05db      	lsls	r3, r3, #23
 8000954:	4605      	mov	r5, r0
 8000956:	460c      	mov	r4, r1
 8000958:	4616      	mov	r6, r2
 800095a:	d505      	bpl.n	8000968 <__swrite+0x1e>
 800095c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000960:	2302      	movs	r3, #2
 8000962:	2200      	movs	r2, #0
 8000964:	f000 f83c 	bl	80009e0 <_lseek_r>
 8000968:	89a3      	ldrh	r3, [r4, #12]
 800096a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800096e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000972:	81a3      	strh	r3, [r4, #12]
 8000974:	4632      	mov	r2, r6
 8000976:	463b      	mov	r3, r7
 8000978:	4628      	mov	r0, r5
 800097a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800097e:	f000 b853 	b.w	8000a28 <_write_r>

08000982 <__sseek>:
 8000982:	b510      	push	{r4, lr}
 8000984:	460c      	mov	r4, r1
 8000986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800098a:	f000 f829 	bl	80009e0 <_lseek_r>
 800098e:	1c43      	adds	r3, r0, #1
 8000990:	89a3      	ldrh	r3, [r4, #12]
 8000992:	bf15      	itete	ne
 8000994:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000996:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800099a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800099e:	81a3      	strheq	r3, [r4, #12]
 80009a0:	bf18      	it	ne
 80009a2:	81a3      	strhne	r3, [r4, #12]
 80009a4:	bd10      	pop	{r4, pc}

080009a6 <__sclose>:
 80009a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009aa:	f000 b809 	b.w	80009c0 <_close_r>

080009ae <memset>:
 80009ae:	4402      	add	r2, r0
 80009b0:	4603      	mov	r3, r0
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d100      	bne.n	80009b8 <memset+0xa>
 80009b6:	4770      	bx	lr
 80009b8:	f803 1b01 	strb.w	r1, [r3], #1
 80009bc:	e7f9      	b.n	80009b2 <memset+0x4>
	...

080009c0 <_close_r>:
 80009c0:	b538      	push	{r3, r4, r5, lr}
 80009c2:	4d06      	ldr	r5, [pc, #24]	@ (80009dc <_close_r+0x1c>)
 80009c4:	2300      	movs	r3, #0
 80009c6:	4604      	mov	r4, r0
 80009c8:	4608      	mov	r0, r1
 80009ca:	602b      	str	r3, [r5, #0]
 80009cc:	f7ff fdfe 	bl	80005cc <_close>
 80009d0:	1c43      	adds	r3, r0, #1
 80009d2:	d102      	bne.n	80009da <_close_r+0x1a>
 80009d4:	682b      	ldr	r3, [r5, #0]
 80009d6:	b103      	cbz	r3, 80009da <_close_r+0x1a>
 80009d8:	6023      	str	r3, [r4, #0]
 80009da:	bd38      	pop	{r3, r4, r5, pc}
 80009dc:	20000200 	.word	0x20000200

080009e0 <_lseek_r>:
 80009e0:	b538      	push	{r3, r4, r5, lr}
 80009e2:	4d07      	ldr	r5, [pc, #28]	@ (8000a00 <_lseek_r+0x20>)
 80009e4:	4604      	mov	r4, r0
 80009e6:	4608      	mov	r0, r1
 80009e8:	4611      	mov	r1, r2
 80009ea:	2200      	movs	r2, #0
 80009ec:	602a      	str	r2, [r5, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	f7ff fe13 	bl	800061a <_lseek>
 80009f4:	1c43      	adds	r3, r0, #1
 80009f6:	d102      	bne.n	80009fe <_lseek_r+0x1e>
 80009f8:	682b      	ldr	r3, [r5, #0]
 80009fa:	b103      	cbz	r3, 80009fe <_lseek_r+0x1e>
 80009fc:	6023      	str	r3, [r4, #0]
 80009fe:	bd38      	pop	{r3, r4, r5, pc}
 8000a00:	20000200 	.word	0x20000200

08000a04 <_read_r>:
 8000a04:	b538      	push	{r3, r4, r5, lr}
 8000a06:	4d07      	ldr	r5, [pc, #28]	@ (8000a24 <_read_r+0x20>)
 8000a08:	4604      	mov	r4, r0
 8000a0a:	4608      	mov	r0, r1
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	2200      	movs	r2, #0
 8000a10:	602a      	str	r2, [r5, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	f7ff fda1 	bl	800055a <_read>
 8000a18:	1c43      	adds	r3, r0, #1
 8000a1a:	d102      	bne.n	8000a22 <_read_r+0x1e>
 8000a1c:	682b      	ldr	r3, [r5, #0]
 8000a1e:	b103      	cbz	r3, 8000a22 <_read_r+0x1e>
 8000a20:	6023      	str	r3, [r4, #0]
 8000a22:	bd38      	pop	{r3, r4, r5, pc}
 8000a24:	20000200 	.word	0x20000200

08000a28 <_write_r>:
 8000a28:	b538      	push	{r3, r4, r5, lr}
 8000a2a:	4d07      	ldr	r5, [pc, #28]	@ (8000a48 <_write_r+0x20>)
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	4608      	mov	r0, r1
 8000a30:	4611      	mov	r1, r2
 8000a32:	2200      	movs	r2, #0
 8000a34:	602a      	str	r2, [r5, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	f7ff fdac 	bl	8000594 <_write>
 8000a3c:	1c43      	adds	r3, r0, #1
 8000a3e:	d102      	bne.n	8000a46 <_write_r+0x1e>
 8000a40:	682b      	ldr	r3, [r5, #0]
 8000a42:	b103      	cbz	r3, 8000a46 <_write_r+0x1e>
 8000a44:	6023      	str	r3, [r4, #0]
 8000a46:	bd38      	pop	{r3, r4, r5, pc}
 8000a48:	20000200 	.word	0x20000200

08000a4c <__errno>:
 8000a4c:	4b01      	ldr	r3, [pc, #4]	@ (8000a54 <__errno+0x8>)
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000054 	.word	0x20000054

08000a58 <__libc_init_array>:
 8000a58:	b570      	push	{r4, r5, r6, lr}
 8000a5a:	4d0d      	ldr	r5, [pc, #52]	@ (8000a90 <__libc_init_array+0x38>)
 8000a5c:	4c0d      	ldr	r4, [pc, #52]	@ (8000a94 <__libc_init_array+0x3c>)
 8000a5e:	1b64      	subs	r4, r4, r5
 8000a60:	10a4      	asrs	r4, r4, #2
 8000a62:	2600      	movs	r6, #0
 8000a64:	42a6      	cmp	r6, r4
 8000a66:	d109      	bne.n	8000a7c <__libc_init_array+0x24>
 8000a68:	4d0b      	ldr	r5, [pc, #44]	@ (8000a98 <__libc_init_array+0x40>)
 8000a6a:	4c0c      	ldr	r4, [pc, #48]	@ (8000a9c <__libc_init_array+0x44>)
 8000a6c:	f000 fe6e 	bl	800174c <_init>
 8000a70:	1b64      	subs	r4, r4, r5
 8000a72:	10a4      	asrs	r4, r4, #2
 8000a74:	2600      	movs	r6, #0
 8000a76:	42a6      	cmp	r6, r4
 8000a78:	d105      	bne.n	8000a86 <__libc_init_array+0x2e>
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
 8000a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a80:	4798      	blx	r3
 8000a82:	3601      	adds	r6, #1
 8000a84:	e7ee      	b.n	8000a64 <__libc_init_array+0xc>
 8000a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a8a:	4798      	blx	r3
 8000a8c:	3601      	adds	r6, #1
 8000a8e:	e7f2      	b.n	8000a76 <__libc_init_array+0x1e>
 8000a90:	080018a8 	.word	0x080018a8
 8000a94:	080018a8 	.word	0x080018a8
 8000a98:	080018a8 	.word	0x080018a8
 8000a9c:	080018ac 	.word	0x080018ac

08000aa0 <__retarget_lock_init_recursive>:
 8000aa0:	4770      	bx	lr

08000aa2 <__retarget_lock_acquire_recursive>:
 8000aa2:	4770      	bx	lr

08000aa4 <__retarget_lock_release_recursive>:
 8000aa4:	4770      	bx	lr
	...

08000aa8 <__assert_func>:
 8000aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000aaa:	4614      	mov	r4, r2
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <__assert_func+0x2c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4605      	mov	r5, r0
 8000ab4:	68d8      	ldr	r0, [r3, #12]
 8000ab6:	b14c      	cbz	r4, 8000acc <__assert_func+0x24>
 8000ab8:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <__assert_func+0x30>)
 8000aba:	9100      	str	r1, [sp, #0]
 8000abc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000ac0:	4906      	ldr	r1, [pc, #24]	@ (8000adc <__assert_func+0x34>)
 8000ac2:	462b      	mov	r3, r5
 8000ac4:	f000 fc88 	bl	80013d8 <fiprintf>
 8000ac8:	f000 fd70 	bl	80015ac <abort>
 8000acc:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <__assert_func+0x38>)
 8000ace:	461c      	mov	r4, r3
 8000ad0:	e7f3      	b.n	8000aba <__assert_func+0x12>
 8000ad2:	bf00      	nop
 8000ad4:	20000054 	.word	0x20000054
 8000ad8:	0800182e 	.word	0x0800182e
 8000adc:	0800183b 	.word	0x0800183b
 8000ae0:	08001869 	.word	0x08001869

08000ae4 <_free_r>:
 8000ae4:	b538      	push	{r3, r4, r5, lr}
 8000ae6:	4605      	mov	r5, r0
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	d041      	beq.n	8000b70 <_free_r+0x8c>
 8000aec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000af0:	1f0c      	subs	r4, r1, #4
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	bfb8      	it	lt
 8000af6:	18e4      	addlt	r4, r4, r3
 8000af8:	f000 f8e8 	bl	8000ccc <__malloc_lock>
 8000afc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b74 <_free_r+0x90>)
 8000afe:	6813      	ldr	r3, [r2, #0]
 8000b00:	b933      	cbnz	r3, 8000b10 <_free_r+0x2c>
 8000b02:	6063      	str	r3, [r4, #4]
 8000b04:	6014      	str	r4, [r2, #0]
 8000b06:	4628      	mov	r0, r5
 8000b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b0c:	f000 b8e4 	b.w	8000cd8 <__malloc_unlock>
 8000b10:	42a3      	cmp	r3, r4
 8000b12:	d908      	bls.n	8000b26 <_free_r+0x42>
 8000b14:	6820      	ldr	r0, [r4, #0]
 8000b16:	1821      	adds	r1, r4, r0
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	bf01      	itttt	eq
 8000b1c:	6819      	ldreq	r1, [r3, #0]
 8000b1e:	685b      	ldreq	r3, [r3, #4]
 8000b20:	1809      	addeq	r1, r1, r0
 8000b22:	6021      	streq	r1, [r4, #0]
 8000b24:	e7ed      	b.n	8000b02 <_free_r+0x1e>
 8000b26:	461a      	mov	r2, r3
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	b10b      	cbz	r3, 8000b30 <_free_r+0x4c>
 8000b2c:	42a3      	cmp	r3, r4
 8000b2e:	d9fa      	bls.n	8000b26 <_free_r+0x42>
 8000b30:	6811      	ldr	r1, [r2, #0]
 8000b32:	1850      	adds	r0, r2, r1
 8000b34:	42a0      	cmp	r0, r4
 8000b36:	d10b      	bne.n	8000b50 <_free_r+0x6c>
 8000b38:	6820      	ldr	r0, [r4, #0]
 8000b3a:	4401      	add	r1, r0
 8000b3c:	1850      	adds	r0, r2, r1
 8000b3e:	4283      	cmp	r3, r0
 8000b40:	6011      	str	r1, [r2, #0]
 8000b42:	d1e0      	bne.n	8000b06 <_free_r+0x22>
 8000b44:	6818      	ldr	r0, [r3, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	6053      	str	r3, [r2, #4]
 8000b4a:	4408      	add	r0, r1
 8000b4c:	6010      	str	r0, [r2, #0]
 8000b4e:	e7da      	b.n	8000b06 <_free_r+0x22>
 8000b50:	d902      	bls.n	8000b58 <_free_r+0x74>
 8000b52:	230c      	movs	r3, #12
 8000b54:	602b      	str	r3, [r5, #0]
 8000b56:	e7d6      	b.n	8000b06 <_free_r+0x22>
 8000b58:	6820      	ldr	r0, [r4, #0]
 8000b5a:	1821      	adds	r1, r4, r0
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	bf04      	itt	eq
 8000b60:	6819      	ldreq	r1, [r3, #0]
 8000b62:	685b      	ldreq	r3, [r3, #4]
 8000b64:	6063      	str	r3, [r4, #4]
 8000b66:	bf04      	itt	eq
 8000b68:	1809      	addeq	r1, r1, r0
 8000b6a:	6021      	streq	r1, [r4, #0]
 8000b6c:	6054      	str	r4, [r2, #4]
 8000b6e:	e7ca      	b.n	8000b06 <_free_r+0x22>
 8000b70:	bd38      	pop	{r3, r4, r5, pc}
 8000b72:	bf00      	nop
 8000b74:	2000020c 	.word	0x2000020c

08000b78 <malloc>:
 8000b78:	4b02      	ldr	r3, [pc, #8]	@ (8000b84 <malloc+0xc>)
 8000b7a:	4601      	mov	r1, r0
 8000b7c:	6818      	ldr	r0, [r3, #0]
 8000b7e:	f000 b825 	b.w	8000bcc <_malloc_r>
 8000b82:	bf00      	nop
 8000b84:	20000054 	.word	0x20000054

08000b88 <sbrk_aligned>:
 8000b88:	b570      	push	{r4, r5, r6, lr}
 8000b8a:	4e0f      	ldr	r6, [pc, #60]	@ (8000bc8 <sbrk_aligned+0x40>)
 8000b8c:	460c      	mov	r4, r1
 8000b8e:	6831      	ldr	r1, [r6, #0]
 8000b90:	4605      	mov	r5, r0
 8000b92:	b911      	cbnz	r1, 8000b9a <sbrk_aligned+0x12>
 8000b94:	f000 fcfa 	bl	800158c <_sbrk_r>
 8000b98:	6030      	str	r0, [r6, #0]
 8000b9a:	4621      	mov	r1, r4
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	f000 fcf5 	bl	800158c <_sbrk_r>
 8000ba2:	1c43      	adds	r3, r0, #1
 8000ba4:	d103      	bne.n	8000bae <sbrk_aligned+0x26>
 8000ba6:	f04f 34ff 	mov.w	r4, #4294967295
 8000baa:	4620      	mov	r0, r4
 8000bac:	bd70      	pop	{r4, r5, r6, pc}
 8000bae:	1cc4      	adds	r4, r0, #3
 8000bb0:	f024 0403 	bic.w	r4, r4, #3
 8000bb4:	42a0      	cmp	r0, r4
 8000bb6:	d0f8      	beq.n	8000baa <sbrk_aligned+0x22>
 8000bb8:	1a21      	subs	r1, r4, r0
 8000bba:	4628      	mov	r0, r5
 8000bbc:	f000 fce6 	bl	800158c <_sbrk_r>
 8000bc0:	3001      	adds	r0, #1
 8000bc2:	d1f2      	bne.n	8000baa <sbrk_aligned+0x22>
 8000bc4:	e7ef      	b.n	8000ba6 <sbrk_aligned+0x1e>
 8000bc6:	bf00      	nop
 8000bc8:	20000208 	.word	0x20000208

08000bcc <_malloc_r>:
 8000bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bd0:	1ccd      	adds	r5, r1, #3
 8000bd2:	f025 0503 	bic.w	r5, r5, #3
 8000bd6:	3508      	adds	r5, #8
 8000bd8:	2d0c      	cmp	r5, #12
 8000bda:	bf38      	it	cc
 8000bdc:	250c      	movcc	r5, #12
 8000bde:	2d00      	cmp	r5, #0
 8000be0:	4606      	mov	r6, r0
 8000be2:	db01      	blt.n	8000be8 <_malloc_r+0x1c>
 8000be4:	42a9      	cmp	r1, r5
 8000be6:	d904      	bls.n	8000bf2 <_malloc_r+0x26>
 8000be8:	230c      	movs	r3, #12
 8000bea:	6033      	str	r3, [r6, #0]
 8000bec:	2000      	movs	r0, #0
 8000bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000cc8 <_malloc_r+0xfc>
 8000bf6:	f000 f869 	bl	8000ccc <__malloc_lock>
 8000bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8000bfe:	461c      	mov	r4, r3
 8000c00:	bb44      	cbnz	r4, 8000c54 <_malloc_r+0x88>
 8000c02:	4629      	mov	r1, r5
 8000c04:	4630      	mov	r0, r6
 8000c06:	f7ff ffbf 	bl	8000b88 <sbrk_aligned>
 8000c0a:	1c43      	adds	r3, r0, #1
 8000c0c:	4604      	mov	r4, r0
 8000c0e:	d158      	bne.n	8000cc2 <_malloc_r+0xf6>
 8000c10:	f8d8 4000 	ldr.w	r4, [r8]
 8000c14:	4627      	mov	r7, r4
 8000c16:	2f00      	cmp	r7, #0
 8000c18:	d143      	bne.n	8000ca2 <_malloc_r+0xd6>
 8000c1a:	2c00      	cmp	r4, #0
 8000c1c:	d04b      	beq.n	8000cb6 <_malloc_r+0xea>
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	4639      	mov	r1, r7
 8000c22:	4630      	mov	r0, r6
 8000c24:	eb04 0903 	add.w	r9, r4, r3
 8000c28:	f000 fcb0 	bl	800158c <_sbrk_r>
 8000c2c:	4581      	cmp	r9, r0
 8000c2e:	d142      	bne.n	8000cb6 <_malloc_r+0xea>
 8000c30:	6821      	ldr	r1, [r4, #0]
 8000c32:	1a6d      	subs	r5, r5, r1
 8000c34:	4629      	mov	r1, r5
 8000c36:	4630      	mov	r0, r6
 8000c38:	f7ff ffa6 	bl	8000b88 <sbrk_aligned>
 8000c3c:	3001      	adds	r0, #1
 8000c3e:	d03a      	beq.n	8000cb6 <_malloc_r+0xea>
 8000c40:	6823      	ldr	r3, [r4, #0]
 8000c42:	442b      	add	r3, r5
 8000c44:	6023      	str	r3, [r4, #0]
 8000c46:	f8d8 3000 	ldr.w	r3, [r8]
 8000c4a:	685a      	ldr	r2, [r3, #4]
 8000c4c:	bb62      	cbnz	r2, 8000ca8 <_malloc_r+0xdc>
 8000c4e:	f8c8 7000 	str.w	r7, [r8]
 8000c52:	e00f      	b.n	8000c74 <_malloc_r+0xa8>
 8000c54:	6822      	ldr	r2, [r4, #0]
 8000c56:	1b52      	subs	r2, r2, r5
 8000c58:	d420      	bmi.n	8000c9c <_malloc_r+0xd0>
 8000c5a:	2a0b      	cmp	r2, #11
 8000c5c:	d917      	bls.n	8000c8e <_malloc_r+0xc2>
 8000c5e:	1961      	adds	r1, r4, r5
 8000c60:	42a3      	cmp	r3, r4
 8000c62:	6025      	str	r5, [r4, #0]
 8000c64:	bf18      	it	ne
 8000c66:	6059      	strne	r1, [r3, #4]
 8000c68:	6863      	ldr	r3, [r4, #4]
 8000c6a:	bf08      	it	eq
 8000c6c:	f8c8 1000 	streq.w	r1, [r8]
 8000c70:	5162      	str	r2, [r4, r5]
 8000c72:	604b      	str	r3, [r1, #4]
 8000c74:	4630      	mov	r0, r6
 8000c76:	f000 f82f 	bl	8000cd8 <__malloc_unlock>
 8000c7a:	f104 000b 	add.w	r0, r4, #11
 8000c7e:	1d23      	adds	r3, r4, #4
 8000c80:	f020 0007 	bic.w	r0, r0, #7
 8000c84:	1ac2      	subs	r2, r0, r3
 8000c86:	bf1c      	itt	ne
 8000c88:	1a1b      	subne	r3, r3, r0
 8000c8a:	50a3      	strne	r3, [r4, r2]
 8000c8c:	e7af      	b.n	8000bee <_malloc_r+0x22>
 8000c8e:	6862      	ldr	r2, [r4, #4]
 8000c90:	42a3      	cmp	r3, r4
 8000c92:	bf0c      	ite	eq
 8000c94:	f8c8 2000 	streq.w	r2, [r8]
 8000c98:	605a      	strne	r2, [r3, #4]
 8000c9a:	e7eb      	b.n	8000c74 <_malloc_r+0xa8>
 8000c9c:	4623      	mov	r3, r4
 8000c9e:	6864      	ldr	r4, [r4, #4]
 8000ca0:	e7ae      	b.n	8000c00 <_malloc_r+0x34>
 8000ca2:	463c      	mov	r4, r7
 8000ca4:	687f      	ldr	r7, [r7, #4]
 8000ca6:	e7b6      	b.n	8000c16 <_malloc_r+0x4a>
 8000ca8:	461a      	mov	r2, r3
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	42a3      	cmp	r3, r4
 8000cae:	d1fb      	bne.n	8000ca8 <_malloc_r+0xdc>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	6053      	str	r3, [r2, #4]
 8000cb4:	e7de      	b.n	8000c74 <_malloc_r+0xa8>
 8000cb6:	230c      	movs	r3, #12
 8000cb8:	6033      	str	r3, [r6, #0]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	f000 f80c 	bl	8000cd8 <__malloc_unlock>
 8000cc0:	e794      	b.n	8000bec <_malloc_r+0x20>
 8000cc2:	6005      	str	r5, [r0, #0]
 8000cc4:	e7d6      	b.n	8000c74 <_malloc_r+0xa8>
 8000cc6:	bf00      	nop
 8000cc8:	2000020c 	.word	0x2000020c

08000ccc <__malloc_lock>:
 8000ccc:	4801      	ldr	r0, [pc, #4]	@ (8000cd4 <__malloc_lock+0x8>)
 8000cce:	f7ff bee8 	b.w	8000aa2 <__retarget_lock_acquire_recursive>
 8000cd2:	bf00      	nop
 8000cd4:	20000204 	.word	0x20000204

08000cd8 <__malloc_unlock>:
 8000cd8:	4801      	ldr	r0, [pc, #4]	@ (8000ce0 <__malloc_unlock+0x8>)
 8000cda:	f7ff bee3 	b.w	8000aa4 <__retarget_lock_release_recursive>
 8000cde:	bf00      	nop
 8000ce0:	20000204 	.word	0x20000204

08000ce4 <__sfputc_r>:
 8000ce4:	6893      	ldr	r3, [r2, #8]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	b410      	push	{r4}
 8000cec:	6093      	str	r3, [r2, #8]
 8000cee:	da08      	bge.n	8000d02 <__sfputc_r+0x1e>
 8000cf0:	6994      	ldr	r4, [r2, #24]
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	db01      	blt.n	8000cfa <__sfputc_r+0x16>
 8000cf6:	290a      	cmp	r1, #10
 8000cf8:	d103      	bne.n	8000d02 <__sfputc_r+0x1e>
 8000cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cfe:	f000 bbb1 	b.w	8001464 <__swbuf_r>
 8000d02:	6813      	ldr	r3, [r2, #0]
 8000d04:	1c58      	adds	r0, r3, #1
 8000d06:	6010      	str	r0, [r2, #0]
 8000d08:	7019      	strb	r1, [r3, #0]
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <__sfputs_r>:
 8000d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d14:	4606      	mov	r6, r0
 8000d16:	460f      	mov	r7, r1
 8000d18:	4614      	mov	r4, r2
 8000d1a:	18d5      	adds	r5, r2, r3
 8000d1c:	42ac      	cmp	r4, r5
 8000d1e:	d101      	bne.n	8000d24 <__sfputs_r+0x12>
 8000d20:	2000      	movs	r0, #0
 8000d22:	e007      	b.n	8000d34 <__sfputs_r+0x22>
 8000d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d28:	463a      	mov	r2, r7
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	f7ff ffda 	bl	8000ce4 <__sfputc_r>
 8000d30:	1c43      	adds	r3, r0, #1
 8000d32:	d1f3      	bne.n	8000d1c <__sfputs_r+0xa>
 8000d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d38 <_vfiprintf_r>:
 8000d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d3c:	460d      	mov	r5, r1
 8000d3e:	b09d      	sub	sp, #116	@ 0x74
 8000d40:	4614      	mov	r4, r2
 8000d42:	4698      	mov	r8, r3
 8000d44:	4606      	mov	r6, r0
 8000d46:	b118      	cbz	r0, 8000d50 <_vfiprintf_r+0x18>
 8000d48:	6a03      	ldr	r3, [r0, #32]
 8000d4a:	b90b      	cbnz	r3, 8000d50 <_vfiprintf_r+0x18>
 8000d4c:	f7ff fd9c 	bl	8000888 <__sinit>
 8000d50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d52:	07d9      	lsls	r1, r3, #31
 8000d54:	d405      	bmi.n	8000d62 <_vfiprintf_r+0x2a>
 8000d56:	89ab      	ldrh	r3, [r5, #12]
 8000d58:	059a      	lsls	r2, r3, #22
 8000d5a:	d402      	bmi.n	8000d62 <_vfiprintf_r+0x2a>
 8000d5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d5e:	f7ff fea0 	bl	8000aa2 <__retarget_lock_acquire_recursive>
 8000d62:	89ab      	ldrh	r3, [r5, #12]
 8000d64:	071b      	lsls	r3, r3, #28
 8000d66:	d501      	bpl.n	8000d6c <_vfiprintf_r+0x34>
 8000d68:	692b      	ldr	r3, [r5, #16]
 8000d6a:	b99b      	cbnz	r3, 8000d94 <_vfiprintf_r+0x5c>
 8000d6c:	4629      	mov	r1, r5
 8000d6e:	4630      	mov	r0, r6
 8000d70:	f000 fbb6 	bl	80014e0 <__swsetup_r>
 8000d74:	b170      	cbz	r0, 8000d94 <_vfiprintf_r+0x5c>
 8000d76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d78:	07dc      	lsls	r4, r3, #31
 8000d7a:	d504      	bpl.n	8000d86 <_vfiprintf_r+0x4e>
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	b01d      	add	sp, #116	@ 0x74
 8000d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d86:	89ab      	ldrh	r3, [r5, #12]
 8000d88:	0598      	lsls	r0, r3, #22
 8000d8a:	d4f7      	bmi.n	8000d7c <_vfiprintf_r+0x44>
 8000d8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d8e:	f7ff fe89 	bl	8000aa4 <__retarget_lock_release_recursive>
 8000d92:	e7f3      	b.n	8000d7c <_vfiprintf_r+0x44>
 8000d94:	2300      	movs	r3, #0
 8000d96:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d98:	2320      	movs	r3, #32
 8000d9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000da2:	2330      	movs	r3, #48	@ 0x30
 8000da4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000f54 <_vfiprintf_r+0x21c>
 8000da8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000dac:	f04f 0901 	mov.w	r9, #1
 8000db0:	4623      	mov	r3, r4
 8000db2:	469a      	mov	sl, r3
 8000db4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000db8:	b10a      	cbz	r2, 8000dbe <_vfiprintf_r+0x86>
 8000dba:	2a25      	cmp	r2, #37	@ 0x25
 8000dbc:	d1f9      	bne.n	8000db2 <_vfiprintf_r+0x7a>
 8000dbe:	ebba 0b04 	subs.w	fp, sl, r4
 8000dc2:	d00b      	beq.n	8000ddc <_vfiprintf_r+0xa4>
 8000dc4:	465b      	mov	r3, fp
 8000dc6:	4622      	mov	r2, r4
 8000dc8:	4629      	mov	r1, r5
 8000dca:	4630      	mov	r0, r6
 8000dcc:	f7ff ffa1 	bl	8000d12 <__sfputs_r>
 8000dd0:	3001      	adds	r0, #1
 8000dd2:	f000 80a7 	beq.w	8000f24 <_vfiprintf_r+0x1ec>
 8000dd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000dd8:	445a      	add	r2, fp
 8000dda:	9209      	str	r2, [sp, #36]	@ 0x24
 8000ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 809f 	beq.w	8000f24 <_vfiprintf_r+0x1ec>
 8000de6:	2300      	movs	r3, #0
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000df0:	f10a 0a01 	add.w	sl, sl, #1
 8000df4:	9304      	str	r3, [sp, #16]
 8000df6:	9307      	str	r3, [sp, #28]
 8000df8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000dfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8000dfe:	4654      	mov	r4, sl
 8000e00:	2205      	movs	r2, #5
 8000e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e06:	4853      	ldr	r0, [pc, #332]	@ (8000f54 <_vfiprintf_r+0x21c>)
 8000e08:	f7ff f9e2 	bl	80001d0 <memchr>
 8000e0c:	9a04      	ldr	r2, [sp, #16]
 8000e0e:	b9d8      	cbnz	r0, 8000e48 <_vfiprintf_r+0x110>
 8000e10:	06d1      	lsls	r1, r2, #27
 8000e12:	bf44      	itt	mi
 8000e14:	2320      	movmi	r3, #32
 8000e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e1a:	0713      	lsls	r3, r2, #28
 8000e1c:	bf44      	itt	mi
 8000e1e:	232b      	movmi	r3, #43	@ 0x2b
 8000e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e24:	f89a 3000 	ldrb.w	r3, [sl]
 8000e28:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e2a:	d015      	beq.n	8000e58 <_vfiprintf_r+0x120>
 8000e2c:	9a07      	ldr	r2, [sp, #28]
 8000e2e:	4654      	mov	r4, sl
 8000e30:	2000      	movs	r0, #0
 8000e32:	f04f 0c0a 	mov.w	ip, #10
 8000e36:	4621      	mov	r1, r4
 8000e38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e3c:	3b30      	subs	r3, #48	@ 0x30
 8000e3e:	2b09      	cmp	r3, #9
 8000e40:	d94b      	bls.n	8000eda <_vfiprintf_r+0x1a2>
 8000e42:	b1b0      	cbz	r0, 8000e72 <_vfiprintf_r+0x13a>
 8000e44:	9207      	str	r2, [sp, #28]
 8000e46:	e014      	b.n	8000e72 <_vfiprintf_r+0x13a>
 8000e48:	eba0 0308 	sub.w	r3, r0, r8
 8000e4c:	fa09 f303 	lsl.w	r3, r9, r3
 8000e50:	4313      	orrs	r3, r2
 8000e52:	9304      	str	r3, [sp, #16]
 8000e54:	46a2      	mov	sl, r4
 8000e56:	e7d2      	b.n	8000dfe <_vfiprintf_r+0xc6>
 8000e58:	9b03      	ldr	r3, [sp, #12]
 8000e5a:	1d19      	adds	r1, r3, #4
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	9103      	str	r1, [sp, #12]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	bfbb      	ittet	lt
 8000e64:	425b      	neglt	r3, r3
 8000e66:	f042 0202 	orrlt.w	r2, r2, #2
 8000e6a:	9307      	strge	r3, [sp, #28]
 8000e6c:	9307      	strlt	r3, [sp, #28]
 8000e6e:	bfb8      	it	lt
 8000e70:	9204      	strlt	r2, [sp, #16]
 8000e72:	7823      	ldrb	r3, [r4, #0]
 8000e74:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e76:	d10a      	bne.n	8000e8e <_vfiprintf_r+0x156>
 8000e78:	7863      	ldrb	r3, [r4, #1]
 8000e7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e7c:	d132      	bne.n	8000ee4 <_vfiprintf_r+0x1ac>
 8000e7e:	9b03      	ldr	r3, [sp, #12]
 8000e80:	1d1a      	adds	r2, r3, #4
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	9203      	str	r2, [sp, #12]
 8000e86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e8a:	3402      	adds	r4, #2
 8000e8c:	9305      	str	r3, [sp, #20]
 8000e8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000f64 <_vfiprintf_r+0x22c>
 8000e92:	7821      	ldrb	r1, [r4, #0]
 8000e94:	2203      	movs	r2, #3
 8000e96:	4650      	mov	r0, sl
 8000e98:	f7ff f99a 	bl	80001d0 <memchr>
 8000e9c:	b138      	cbz	r0, 8000eae <_vfiprintf_r+0x176>
 8000e9e:	9b04      	ldr	r3, [sp, #16]
 8000ea0:	eba0 000a 	sub.w	r0, r0, sl
 8000ea4:	2240      	movs	r2, #64	@ 0x40
 8000ea6:	4082      	lsls	r2, r0
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	3401      	adds	r4, #1
 8000eac:	9304      	str	r3, [sp, #16]
 8000eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eb2:	4829      	ldr	r0, [pc, #164]	@ (8000f58 <_vfiprintf_r+0x220>)
 8000eb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000eb8:	2206      	movs	r2, #6
 8000eba:	f7ff f989 	bl	80001d0 <memchr>
 8000ebe:	2800      	cmp	r0, #0
 8000ec0:	d03f      	beq.n	8000f42 <_vfiprintf_r+0x20a>
 8000ec2:	4b26      	ldr	r3, [pc, #152]	@ (8000f5c <_vfiprintf_r+0x224>)
 8000ec4:	bb1b      	cbnz	r3, 8000f0e <_vfiprintf_r+0x1d6>
 8000ec6:	9b03      	ldr	r3, [sp, #12]
 8000ec8:	3307      	adds	r3, #7
 8000eca:	f023 0307 	bic.w	r3, r3, #7
 8000ece:	3308      	adds	r3, #8
 8000ed0:	9303      	str	r3, [sp, #12]
 8000ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000ed4:	443b      	add	r3, r7
 8000ed6:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ed8:	e76a      	b.n	8000db0 <_vfiprintf_r+0x78>
 8000eda:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ede:	460c      	mov	r4, r1
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	e7a8      	b.n	8000e36 <_vfiprintf_r+0xfe>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	3401      	adds	r4, #1
 8000ee8:	9305      	str	r3, [sp, #20]
 8000eea:	4619      	mov	r1, r3
 8000eec:	f04f 0c0a 	mov.w	ip, #10
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ef6:	3a30      	subs	r2, #48	@ 0x30
 8000ef8:	2a09      	cmp	r2, #9
 8000efa:	d903      	bls.n	8000f04 <_vfiprintf_r+0x1cc>
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d0c6      	beq.n	8000e8e <_vfiprintf_r+0x156>
 8000f00:	9105      	str	r1, [sp, #20]
 8000f02:	e7c4      	b.n	8000e8e <_vfiprintf_r+0x156>
 8000f04:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f08:	4604      	mov	r4, r0
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e7f0      	b.n	8000ef0 <_vfiprintf_r+0x1b8>
 8000f0e:	ab03      	add	r3, sp, #12
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	462a      	mov	r2, r5
 8000f14:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <_vfiprintf_r+0x228>)
 8000f16:	a904      	add	r1, sp, #16
 8000f18:	4630      	mov	r0, r6
 8000f1a:	f3af 8000 	nop.w
 8000f1e:	4607      	mov	r7, r0
 8000f20:	1c78      	adds	r0, r7, #1
 8000f22:	d1d6      	bne.n	8000ed2 <_vfiprintf_r+0x19a>
 8000f24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f26:	07d9      	lsls	r1, r3, #31
 8000f28:	d405      	bmi.n	8000f36 <_vfiprintf_r+0x1fe>
 8000f2a:	89ab      	ldrh	r3, [r5, #12]
 8000f2c:	059a      	lsls	r2, r3, #22
 8000f2e:	d402      	bmi.n	8000f36 <_vfiprintf_r+0x1fe>
 8000f30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f32:	f7ff fdb7 	bl	8000aa4 <__retarget_lock_release_recursive>
 8000f36:	89ab      	ldrh	r3, [r5, #12]
 8000f38:	065b      	lsls	r3, r3, #25
 8000f3a:	f53f af1f 	bmi.w	8000d7c <_vfiprintf_r+0x44>
 8000f3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f40:	e71e      	b.n	8000d80 <_vfiprintf_r+0x48>
 8000f42:	ab03      	add	r3, sp, #12
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	462a      	mov	r2, r5
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <_vfiprintf_r+0x228>)
 8000f4a:	a904      	add	r1, sp, #16
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	f000 f879 	bl	8001044 <_printf_i>
 8000f52:	e7e4      	b.n	8000f1e <_vfiprintf_r+0x1e6>
 8000f54:	0800186a 	.word	0x0800186a
 8000f58:	08001874 	.word	0x08001874
 8000f5c:	00000000 	.word	0x00000000
 8000f60:	08000d13 	.word	0x08000d13
 8000f64:	08001870 	.word	0x08001870

08000f68 <_printf_common>:
 8000f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f6c:	4616      	mov	r6, r2
 8000f6e:	4698      	mov	r8, r3
 8000f70:	688a      	ldr	r2, [r1, #8]
 8000f72:	690b      	ldr	r3, [r1, #16]
 8000f74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	bfb8      	it	lt
 8000f7c:	4613      	movlt	r3, r2
 8000f7e:	6033      	str	r3, [r6, #0]
 8000f80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f84:	4607      	mov	r7, r0
 8000f86:	460c      	mov	r4, r1
 8000f88:	b10a      	cbz	r2, 8000f8e <_printf_common+0x26>
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	6033      	str	r3, [r6, #0]
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	0699      	lsls	r1, r3, #26
 8000f92:	bf42      	ittt	mi
 8000f94:	6833      	ldrmi	r3, [r6, #0]
 8000f96:	3302      	addmi	r3, #2
 8000f98:	6033      	strmi	r3, [r6, #0]
 8000f9a:	6825      	ldr	r5, [r4, #0]
 8000f9c:	f015 0506 	ands.w	r5, r5, #6
 8000fa0:	d106      	bne.n	8000fb0 <_printf_common+0x48>
 8000fa2:	f104 0a19 	add.w	sl, r4, #25
 8000fa6:	68e3      	ldr	r3, [r4, #12]
 8000fa8:	6832      	ldr	r2, [r6, #0]
 8000faa:	1a9b      	subs	r3, r3, r2
 8000fac:	42ab      	cmp	r3, r5
 8000fae:	dc26      	bgt.n	8000ffe <_printf_common+0x96>
 8000fb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000fb4:	6822      	ldr	r2, [r4, #0]
 8000fb6:	3b00      	subs	r3, #0
 8000fb8:	bf18      	it	ne
 8000fba:	2301      	movne	r3, #1
 8000fbc:	0692      	lsls	r2, r2, #26
 8000fbe:	d42b      	bmi.n	8001018 <_printf_common+0xb0>
 8000fc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000fc4:	4641      	mov	r1, r8
 8000fc6:	4638      	mov	r0, r7
 8000fc8:	47c8      	blx	r9
 8000fca:	3001      	adds	r0, #1
 8000fcc:	d01e      	beq.n	800100c <_printf_common+0xa4>
 8000fce:	6823      	ldr	r3, [r4, #0]
 8000fd0:	6922      	ldr	r2, [r4, #16]
 8000fd2:	f003 0306 	and.w	r3, r3, #6
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf02      	ittt	eq
 8000fda:	68e5      	ldreq	r5, [r4, #12]
 8000fdc:	6833      	ldreq	r3, [r6, #0]
 8000fde:	1aed      	subeq	r5, r5, r3
 8000fe0:	68a3      	ldr	r3, [r4, #8]
 8000fe2:	bf0c      	ite	eq
 8000fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fe8:	2500      	movne	r5, #0
 8000fea:	4293      	cmp	r3, r2
 8000fec:	bfc4      	itt	gt
 8000fee:	1a9b      	subgt	r3, r3, r2
 8000ff0:	18ed      	addgt	r5, r5, r3
 8000ff2:	2600      	movs	r6, #0
 8000ff4:	341a      	adds	r4, #26
 8000ff6:	42b5      	cmp	r5, r6
 8000ff8:	d11a      	bne.n	8001030 <_printf_common+0xc8>
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	e008      	b.n	8001010 <_printf_common+0xa8>
 8000ffe:	2301      	movs	r3, #1
 8001000:	4652      	mov	r2, sl
 8001002:	4641      	mov	r1, r8
 8001004:	4638      	mov	r0, r7
 8001006:	47c8      	blx	r9
 8001008:	3001      	adds	r0, #1
 800100a:	d103      	bne.n	8001014 <_printf_common+0xac>
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001014:	3501      	adds	r5, #1
 8001016:	e7c6      	b.n	8000fa6 <_printf_common+0x3e>
 8001018:	18e1      	adds	r1, r4, r3
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	2030      	movs	r0, #48	@ 0x30
 800101e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001022:	4422      	add	r2, r4
 8001024:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001028:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800102c:	3302      	adds	r3, #2
 800102e:	e7c7      	b.n	8000fc0 <_printf_common+0x58>
 8001030:	2301      	movs	r3, #1
 8001032:	4622      	mov	r2, r4
 8001034:	4641      	mov	r1, r8
 8001036:	4638      	mov	r0, r7
 8001038:	47c8      	blx	r9
 800103a:	3001      	adds	r0, #1
 800103c:	d0e6      	beq.n	800100c <_printf_common+0xa4>
 800103e:	3601      	adds	r6, #1
 8001040:	e7d9      	b.n	8000ff6 <_printf_common+0x8e>
	...

08001044 <_printf_i>:
 8001044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001048:	7e0f      	ldrb	r7, [r1, #24]
 800104a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800104c:	2f78      	cmp	r7, #120	@ 0x78
 800104e:	4691      	mov	r9, r2
 8001050:	4680      	mov	r8, r0
 8001052:	460c      	mov	r4, r1
 8001054:	469a      	mov	sl, r3
 8001056:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800105a:	d807      	bhi.n	800106c <_printf_i+0x28>
 800105c:	2f62      	cmp	r7, #98	@ 0x62
 800105e:	d80a      	bhi.n	8001076 <_printf_i+0x32>
 8001060:	2f00      	cmp	r7, #0
 8001062:	f000 80d1 	beq.w	8001208 <_printf_i+0x1c4>
 8001066:	2f58      	cmp	r7, #88	@ 0x58
 8001068:	f000 80b8 	beq.w	80011dc <_printf_i+0x198>
 800106c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001070:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001074:	e03a      	b.n	80010ec <_printf_i+0xa8>
 8001076:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800107a:	2b15      	cmp	r3, #21
 800107c:	d8f6      	bhi.n	800106c <_printf_i+0x28>
 800107e:	a101      	add	r1, pc, #4	@ (adr r1, 8001084 <_printf_i+0x40>)
 8001080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001084:	080010dd 	.word	0x080010dd
 8001088:	080010f1 	.word	0x080010f1
 800108c:	0800106d 	.word	0x0800106d
 8001090:	0800106d 	.word	0x0800106d
 8001094:	0800106d 	.word	0x0800106d
 8001098:	0800106d 	.word	0x0800106d
 800109c:	080010f1 	.word	0x080010f1
 80010a0:	0800106d 	.word	0x0800106d
 80010a4:	0800106d 	.word	0x0800106d
 80010a8:	0800106d 	.word	0x0800106d
 80010ac:	0800106d 	.word	0x0800106d
 80010b0:	080011ef 	.word	0x080011ef
 80010b4:	0800111b 	.word	0x0800111b
 80010b8:	080011a9 	.word	0x080011a9
 80010bc:	0800106d 	.word	0x0800106d
 80010c0:	0800106d 	.word	0x0800106d
 80010c4:	08001211 	.word	0x08001211
 80010c8:	0800106d 	.word	0x0800106d
 80010cc:	0800111b 	.word	0x0800111b
 80010d0:	0800106d 	.word	0x0800106d
 80010d4:	0800106d 	.word	0x0800106d
 80010d8:	080011b1 	.word	0x080011b1
 80010dc:	6833      	ldr	r3, [r6, #0]
 80010de:	1d1a      	adds	r2, r3, #4
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6032      	str	r2, [r6, #0]
 80010e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80010e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80010ec:	2301      	movs	r3, #1
 80010ee:	e09c      	b.n	800122a <_printf_i+0x1e6>
 80010f0:	6833      	ldr	r3, [r6, #0]
 80010f2:	6820      	ldr	r0, [r4, #0]
 80010f4:	1d19      	adds	r1, r3, #4
 80010f6:	6031      	str	r1, [r6, #0]
 80010f8:	0606      	lsls	r6, r0, #24
 80010fa:	d501      	bpl.n	8001100 <_printf_i+0xbc>
 80010fc:	681d      	ldr	r5, [r3, #0]
 80010fe:	e003      	b.n	8001108 <_printf_i+0xc4>
 8001100:	0645      	lsls	r5, r0, #25
 8001102:	d5fb      	bpl.n	80010fc <_printf_i+0xb8>
 8001104:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001108:	2d00      	cmp	r5, #0
 800110a:	da03      	bge.n	8001114 <_printf_i+0xd0>
 800110c:	232d      	movs	r3, #45	@ 0x2d
 800110e:	426d      	negs	r5, r5
 8001110:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001114:	4858      	ldr	r0, [pc, #352]	@ (8001278 <_printf_i+0x234>)
 8001116:	230a      	movs	r3, #10
 8001118:	e011      	b.n	800113e <_printf_i+0xfa>
 800111a:	6821      	ldr	r1, [r4, #0]
 800111c:	6833      	ldr	r3, [r6, #0]
 800111e:	0608      	lsls	r0, r1, #24
 8001120:	f853 5b04 	ldr.w	r5, [r3], #4
 8001124:	d402      	bmi.n	800112c <_printf_i+0xe8>
 8001126:	0649      	lsls	r1, r1, #25
 8001128:	bf48      	it	mi
 800112a:	b2ad      	uxthmi	r5, r5
 800112c:	2f6f      	cmp	r7, #111	@ 0x6f
 800112e:	4852      	ldr	r0, [pc, #328]	@ (8001278 <_printf_i+0x234>)
 8001130:	6033      	str	r3, [r6, #0]
 8001132:	bf14      	ite	ne
 8001134:	230a      	movne	r3, #10
 8001136:	2308      	moveq	r3, #8
 8001138:	2100      	movs	r1, #0
 800113a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800113e:	6866      	ldr	r6, [r4, #4]
 8001140:	60a6      	str	r6, [r4, #8]
 8001142:	2e00      	cmp	r6, #0
 8001144:	db05      	blt.n	8001152 <_printf_i+0x10e>
 8001146:	6821      	ldr	r1, [r4, #0]
 8001148:	432e      	orrs	r6, r5
 800114a:	f021 0104 	bic.w	r1, r1, #4
 800114e:	6021      	str	r1, [r4, #0]
 8001150:	d04b      	beq.n	80011ea <_printf_i+0x1a6>
 8001152:	4616      	mov	r6, r2
 8001154:	fbb5 f1f3 	udiv	r1, r5, r3
 8001158:	fb03 5711 	mls	r7, r3, r1, r5
 800115c:	5dc7      	ldrb	r7, [r0, r7]
 800115e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001162:	462f      	mov	r7, r5
 8001164:	42bb      	cmp	r3, r7
 8001166:	460d      	mov	r5, r1
 8001168:	d9f4      	bls.n	8001154 <_printf_i+0x110>
 800116a:	2b08      	cmp	r3, #8
 800116c:	d10b      	bne.n	8001186 <_printf_i+0x142>
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	07df      	lsls	r7, r3, #31
 8001172:	d508      	bpl.n	8001186 <_printf_i+0x142>
 8001174:	6923      	ldr	r3, [r4, #16]
 8001176:	6861      	ldr	r1, [r4, #4]
 8001178:	4299      	cmp	r1, r3
 800117a:	bfde      	ittt	le
 800117c:	2330      	movle	r3, #48	@ 0x30
 800117e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001182:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001186:	1b92      	subs	r2, r2, r6
 8001188:	6122      	str	r2, [r4, #16]
 800118a:	f8cd a000 	str.w	sl, [sp]
 800118e:	464b      	mov	r3, r9
 8001190:	aa03      	add	r2, sp, #12
 8001192:	4621      	mov	r1, r4
 8001194:	4640      	mov	r0, r8
 8001196:	f7ff fee7 	bl	8000f68 <_printf_common>
 800119a:	3001      	adds	r0, #1
 800119c:	d14a      	bne.n	8001234 <_printf_i+0x1f0>
 800119e:	f04f 30ff 	mov.w	r0, #4294967295
 80011a2:	b004      	add	sp, #16
 80011a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	f043 0320 	orr.w	r3, r3, #32
 80011ae:	6023      	str	r3, [r4, #0]
 80011b0:	4832      	ldr	r0, [pc, #200]	@ (800127c <_printf_i+0x238>)
 80011b2:	2778      	movs	r7, #120	@ 0x78
 80011b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	6831      	ldr	r1, [r6, #0]
 80011bc:	061f      	lsls	r7, r3, #24
 80011be:	f851 5b04 	ldr.w	r5, [r1], #4
 80011c2:	d402      	bmi.n	80011ca <_printf_i+0x186>
 80011c4:	065f      	lsls	r7, r3, #25
 80011c6:	bf48      	it	mi
 80011c8:	b2ad      	uxthmi	r5, r5
 80011ca:	6031      	str	r1, [r6, #0]
 80011cc:	07d9      	lsls	r1, r3, #31
 80011ce:	bf44      	itt	mi
 80011d0:	f043 0320 	orrmi.w	r3, r3, #32
 80011d4:	6023      	strmi	r3, [r4, #0]
 80011d6:	b11d      	cbz	r5, 80011e0 <_printf_i+0x19c>
 80011d8:	2310      	movs	r3, #16
 80011da:	e7ad      	b.n	8001138 <_printf_i+0xf4>
 80011dc:	4826      	ldr	r0, [pc, #152]	@ (8001278 <_printf_i+0x234>)
 80011de:	e7e9      	b.n	80011b4 <_printf_i+0x170>
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	f023 0320 	bic.w	r3, r3, #32
 80011e6:	6023      	str	r3, [r4, #0]
 80011e8:	e7f6      	b.n	80011d8 <_printf_i+0x194>
 80011ea:	4616      	mov	r6, r2
 80011ec:	e7bd      	b.n	800116a <_printf_i+0x126>
 80011ee:	6833      	ldr	r3, [r6, #0]
 80011f0:	6825      	ldr	r5, [r4, #0]
 80011f2:	6961      	ldr	r1, [r4, #20]
 80011f4:	1d18      	adds	r0, r3, #4
 80011f6:	6030      	str	r0, [r6, #0]
 80011f8:	062e      	lsls	r6, r5, #24
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	d501      	bpl.n	8001202 <_printf_i+0x1be>
 80011fe:	6019      	str	r1, [r3, #0]
 8001200:	e002      	b.n	8001208 <_printf_i+0x1c4>
 8001202:	0668      	lsls	r0, r5, #25
 8001204:	d5fb      	bpl.n	80011fe <_printf_i+0x1ba>
 8001206:	8019      	strh	r1, [r3, #0]
 8001208:	2300      	movs	r3, #0
 800120a:	6123      	str	r3, [r4, #16]
 800120c:	4616      	mov	r6, r2
 800120e:	e7bc      	b.n	800118a <_printf_i+0x146>
 8001210:	6833      	ldr	r3, [r6, #0]
 8001212:	1d1a      	adds	r2, r3, #4
 8001214:	6032      	str	r2, [r6, #0]
 8001216:	681e      	ldr	r6, [r3, #0]
 8001218:	6862      	ldr	r2, [r4, #4]
 800121a:	2100      	movs	r1, #0
 800121c:	4630      	mov	r0, r6
 800121e:	f7fe ffd7 	bl	80001d0 <memchr>
 8001222:	b108      	cbz	r0, 8001228 <_printf_i+0x1e4>
 8001224:	1b80      	subs	r0, r0, r6
 8001226:	6060      	str	r0, [r4, #4]
 8001228:	6863      	ldr	r3, [r4, #4]
 800122a:	6123      	str	r3, [r4, #16]
 800122c:	2300      	movs	r3, #0
 800122e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001232:	e7aa      	b.n	800118a <_printf_i+0x146>
 8001234:	6923      	ldr	r3, [r4, #16]
 8001236:	4632      	mov	r2, r6
 8001238:	4649      	mov	r1, r9
 800123a:	4640      	mov	r0, r8
 800123c:	47d0      	blx	sl
 800123e:	3001      	adds	r0, #1
 8001240:	d0ad      	beq.n	800119e <_printf_i+0x15a>
 8001242:	6823      	ldr	r3, [r4, #0]
 8001244:	079b      	lsls	r3, r3, #30
 8001246:	d413      	bmi.n	8001270 <_printf_i+0x22c>
 8001248:	68e0      	ldr	r0, [r4, #12]
 800124a:	9b03      	ldr	r3, [sp, #12]
 800124c:	4298      	cmp	r0, r3
 800124e:	bfb8      	it	lt
 8001250:	4618      	movlt	r0, r3
 8001252:	e7a6      	b.n	80011a2 <_printf_i+0x15e>
 8001254:	2301      	movs	r3, #1
 8001256:	4632      	mov	r2, r6
 8001258:	4649      	mov	r1, r9
 800125a:	4640      	mov	r0, r8
 800125c:	47d0      	blx	sl
 800125e:	3001      	adds	r0, #1
 8001260:	d09d      	beq.n	800119e <_printf_i+0x15a>
 8001262:	3501      	adds	r5, #1
 8001264:	68e3      	ldr	r3, [r4, #12]
 8001266:	9903      	ldr	r1, [sp, #12]
 8001268:	1a5b      	subs	r3, r3, r1
 800126a:	42ab      	cmp	r3, r5
 800126c:	dcf2      	bgt.n	8001254 <_printf_i+0x210>
 800126e:	e7eb      	b.n	8001248 <_printf_i+0x204>
 8001270:	2500      	movs	r5, #0
 8001272:	f104 0619 	add.w	r6, r4, #25
 8001276:	e7f5      	b.n	8001264 <_printf_i+0x220>
 8001278:	0800187b 	.word	0x0800187b
 800127c:	0800188c 	.word	0x0800188c

08001280 <__sflush_r>:
 8001280:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001288:	0716      	lsls	r6, r2, #28
 800128a:	4605      	mov	r5, r0
 800128c:	460c      	mov	r4, r1
 800128e:	d454      	bmi.n	800133a <__sflush_r+0xba>
 8001290:	684b      	ldr	r3, [r1, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	dc02      	bgt.n	800129c <__sflush_r+0x1c>
 8001296:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001298:	2b00      	cmp	r3, #0
 800129a:	dd48      	ble.n	800132e <__sflush_r+0xae>
 800129c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800129e:	2e00      	cmp	r6, #0
 80012a0:	d045      	beq.n	800132e <__sflush_r+0xae>
 80012a2:	2300      	movs	r3, #0
 80012a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80012a8:	682f      	ldr	r7, [r5, #0]
 80012aa:	6a21      	ldr	r1, [r4, #32]
 80012ac:	602b      	str	r3, [r5, #0]
 80012ae:	d030      	beq.n	8001312 <__sflush_r+0x92>
 80012b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80012b2:	89a3      	ldrh	r3, [r4, #12]
 80012b4:	0759      	lsls	r1, r3, #29
 80012b6:	d505      	bpl.n	80012c4 <__sflush_r+0x44>
 80012b8:	6863      	ldr	r3, [r4, #4]
 80012ba:	1ad2      	subs	r2, r2, r3
 80012bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80012be:	b10b      	cbz	r3, 80012c4 <__sflush_r+0x44>
 80012c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012c2:	1ad2      	subs	r2, r2, r3
 80012c4:	2300      	movs	r3, #0
 80012c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012c8:	6a21      	ldr	r1, [r4, #32]
 80012ca:	4628      	mov	r0, r5
 80012cc:	47b0      	blx	r6
 80012ce:	1c43      	adds	r3, r0, #1
 80012d0:	89a3      	ldrh	r3, [r4, #12]
 80012d2:	d106      	bne.n	80012e2 <__sflush_r+0x62>
 80012d4:	6829      	ldr	r1, [r5, #0]
 80012d6:	291d      	cmp	r1, #29
 80012d8:	d82b      	bhi.n	8001332 <__sflush_r+0xb2>
 80012da:	4a2a      	ldr	r2, [pc, #168]	@ (8001384 <__sflush_r+0x104>)
 80012dc:	40ca      	lsrs	r2, r1
 80012de:	07d6      	lsls	r6, r2, #31
 80012e0:	d527      	bpl.n	8001332 <__sflush_r+0xb2>
 80012e2:	2200      	movs	r2, #0
 80012e4:	6062      	str	r2, [r4, #4]
 80012e6:	04d9      	lsls	r1, r3, #19
 80012e8:	6922      	ldr	r2, [r4, #16]
 80012ea:	6022      	str	r2, [r4, #0]
 80012ec:	d504      	bpl.n	80012f8 <__sflush_r+0x78>
 80012ee:	1c42      	adds	r2, r0, #1
 80012f0:	d101      	bne.n	80012f6 <__sflush_r+0x76>
 80012f2:	682b      	ldr	r3, [r5, #0]
 80012f4:	b903      	cbnz	r3, 80012f8 <__sflush_r+0x78>
 80012f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80012f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012fa:	602f      	str	r7, [r5, #0]
 80012fc:	b1b9      	cbz	r1, 800132e <__sflush_r+0xae>
 80012fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001302:	4299      	cmp	r1, r3
 8001304:	d002      	beq.n	800130c <__sflush_r+0x8c>
 8001306:	4628      	mov	r0, r5
 8001308:	f7ff fbec 	bl	8000ae4 <_free_r>
 800130c:	2300      	movs	r3, #0
 800130e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001310:	e00d      	b.n	800132e <__sflush_r+0xae>
 8001312:	2301      	movs	r3, #1
 8001314:	4628      	mov	r0, r5
 8001316:	47b0      	blx	r6
 8001318:	4602      	mov	r2, r0
 800131a:	1c50      	adds	r0, r2, #1
 800131c:	d1c9      	bne.n	80012b2 <__sflush_r+0x32>
 800131e:	682b      	ldr	r3, [r5, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0c6      	beq.n	80012b2 <__sflush_r+0x32>
 8001324:	2b1d      	cmp	r3, #29
 8001326:	d001      	beq.n	800132c <__sflush_r+0xac>
 8001328:	2b16      	cmp	r3, #22
 800132a:	d11e      	bne.n	800136a <__sflush_r+0xea>
 800132c:	602f      	str	r7, [r5, #0]
 800132e:	2000      	movs	r0, #0
 8001330:	e022      	b.n	8001378 <__sflush_r+0xf8>
 8001332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001336:	b21b      	sxth	r3, r3
 8001338:	e01b      	b.n	8001372 <__sflush_r+0xf2>
 800133a:	690f      	ldr	r7, [r1, #16]
 800133c:	2f00      	cmp	r7, #0
 800133e:	d0f6      	beq.n	800132e <__sflush_r+0xae>
 8001340:	0793      	lsls	r3, r2, #30
 8001342:	680e      	ldr	r6, [r1, #0]
 8001344:	bf08      	it	eq
 8001346:	694b      	ldreq	r3, [r1, #20]
 8001348:	600f      	str	r7, [r1, #0]
 800134a:	bf18      	it	ne
 800134c:	2300      	movne	r3, #0
 800134e:	eba6 0807 	sub.w	r8, r6, r7
 8001352:	608b      	str	r3, [r1, #8]
 8001354:	f1b8 0f00 	cmp.w	r8, #0
 8001358:	dde9      	ble.n	800132e <__sflush_r+0xae>
 800135a:	6a21      	ldr	r1, [r4, #32]
 800135c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800135e:	4643      	mov	r3, r8
 8001360:	463a      	mov	r2, r7
 8001362:	4628      	mov	r0, r5
 8001364:	47b0      	blx	r6
 8001366:	2800      	cmp	r0, #0
 8001368:	dc08      	bgt.n	800137c <__sflush_r+0xfc>
 800136a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800136e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001372:	81a3      	strh	r3, [r4, #12]
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800137c:	4407      	add	r7, r0
 800137e:	eba8 0800 	sub.w	r8, r8, r0
 8001382:	e7e7      	b.n	8001354 <__sflush_r+0xd4>
 8001384:	20400001 	.word	0x20400001

08001388 <_fflush_r>:
 8001388:	b538      	push	{r3, r4, r5, lr}
 800138a:	690b      	ldr	r3, [r1, #16]
 800138c:	4605      	mov	r5, r0
 800138e:	460c      	mov	r4, r1
 8001390:	b913      	cbnz	r3, 8001398 <_fflush_r+0x10>
 8001392:	2500      	movs	r5, #0
 8001394:	4628      	mov	r0, r5
 8001396:	bd38      	pop	{r3, r4, r5, pc}
 8001398:	b118      	cbz	r0, 80013a2 <_fflush_r+0x1a>
 800139a:	6a03      	ldr	r3, [r0, #32]
 800139c:	b90b      	cbnz	r3, 80013a2 <_fflush_r+0x1a>
 800139e:	f7ff fa73 	bl	8000888 <__sinit>
 80013a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f3      	beq.n	8001392 <_fflush_r+0xa>
 80013aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80013ac:	07d0      	lsls	r0, r2, #31
 80013ae:	d404      	bmi.n	80013ba <_fflush_r+0x32>
 80013b0:	0599      	lsls	r1, r3, #22
 80013b2:	d402      	bmi.n	80013ba <_fflush_r+0x32>
 80013b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013b6:	f7ff fb74 	bl	8000aa2 <__retarget_lock_acquire_recursive>
 80013ba:	4628      	mov	r0, r5
 80013bc:	4621      	mov	r1, r4
 80013be:	f7ff ff5f 	bl	8001280 <__sflush_r>
 80013c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80013c4:	07da      	lsls	r2, r3, #31
 80013c6:	4605      	mov	r5, r0
 80013c8:	d4e4      	bmi.n	8001394 <_fflush_r+0xc>
 80013ca:	89a3      	ldrh	r3, [r4, #12]
 80013cc:	059b      	lsls	r3, r3, #22
 80013ce:	d4e1      	bmi.n	8001394 <_fflush_r+0xc>
 80013d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013d2:	f7ff fb67 	bl	8000aa4 <__retarget_lock_release_recursive>
 80013d6:	e7dd      	b.n	8001394 <_fflush_r+0xc>

080013d8 <fiprintf>:
 80013d8:	b40e      	push	{r1, r2, r3}
 80013da:	b503      	push	{r0, r1, lr}
 80013dc:	4601      	mov	r1, r0
 80013de:	ab03      	add	r3, sp, #12
 80013e0:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <fiprintf+0x20>)
 80013e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80013e6:	6800      	ldr	r0, [r0, #0]
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	f7ff fca5 	bl	8000d38 <_vfiprintf_r>
 80013ee:	b002      	add	sp, #8
 80013f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80013f4:	b003      	add	sp, #12
 80013f6:	4770      	bx	lr
 80013f8:	20000054 	.word	0x20000054

080013fc <_putc_r>:
 80013fc:	b570      	push	{r4, r5, r6, lr}
 80013fe:	460d      	mov	r5, r1
 8001400:	4614      	mov	r4, r2
 8001402:	4606      	mov	r6, r0
 8001404:	b118      	cbz	r0, 800140e <_putc_r+0x12>
 8001406:	6a03      	ldr	r3, [r0, #32]
 8001408:	b90b      	cbnz	r3, 800140e <_putc_r+0x12>
 800140a:	f7ff fa3d 	bl	8000888 <__sinit>
 800140e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001410:	07d8      	lsls	r0, r3, #31
 8001412:	d405      	bmi.n	8001420 <_putc_r+0x24>
 8001414:	89a3      	ldrh	r3, [r4, #12]
 8001416:	0599      	lsls	r1, r3, #22
 8001418:	d402      	bmi.n	8001420 <_putc_r+0x24>
 800141a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800141c:	f7ff fb41 	bl	8000aa2 <__retarget_lock_acquire_recursive>
 8001420:	68a3      	ldr	r3, [r4, #8]
 8001422:	3b01      	subs	r3, #1
 8001424:	2b00      	cmp	r3, #0
 8001426:	60a3      	str	r3, [r4, #8]
 8001428:	da05      	bge.n	8001436 <_putc_r+0x3a>
 800142a:	69a2      	ldr	r2, [r4, #24]
 800142c:	4293      	cmp	r3, r2
 800142e:	db12      	blt.n	8001456 <_putc_r+0x5a>
 8001430:	b2eb      	uxtb	r3, r5
 8001432:	2b0a      	cmp	r3, #10
 8001434:	d00f      	beq.n	8001456 <_putc_r+0x5a>
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	6022      	str	r2, [r4, #0]
 800143c:	701d      	strb	r5, [r3, #0]
 800143e:	b2ed      	uxtb	r5, r5
 8001440:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001442:	07da      	lsls	r2, r3, #31
 8001444:	d405      	bmi.n	8001452 <_putc_r+0x56>
 8001446:	89a3      	ldrh	r3, [r4, #12]
 8001448:	059b      	lsls	r3, r3, #22
 800144a:	d402      	bmi.n	8001452 <_putc_r+0x56>
 800144c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800144e:	f7ff fb29 	bl	8000aa4 <__retarget_lock_release_recursive>
 8001452:	4628      	mov	r0, r5
 8001454:	bd70      	pop	{r4, r5, r6, pc}
 8001456:	4629      	mov	r1, r5
 8001458:	4622      	mov	r2, r4
 800145a:	4630      	mov	r0, r6
 800145c:	f000 f802 	bl	8001464 <__swbuf_r>
 8001460:	4605      	mov	r5, r0
 8001462:	e7ed      	b.n	8001440 <_putc_r+0x44>

08001464 <__swbuf_r>:
 8001464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001466:	460e      	mov	r6, r1
 8001468:	4614      	mov	r4, r2
 800146a:	4605      	mov	r5, r0
 800146c:	b118      	cbz	r0, 8001476 <__swbuf_r+0x12>
 800146e:	6a03      	ldr	r3, [r0, #32]
 8001470:	b90b      	cbnz	r3, 8001476 <__swbuf_r+0x12>
 8001472:	f7ff fa09 	bl	8000888 <__sinit>
 8001476:	69a3      	ldr	r3, [r4, #24]
 8001478:	60a3      	str	r3, [r4, #8]
 800147a:	89a3      	ldrh	r3, [r4, #12]
 800147c:	071a      	lsls	r2, r3, #28
 800147e:	d501      	bpl.n	8001484 <__swbuf_r+0x20>
 8001480:	6923      	ldr	r3, [r4, #16]
 8001482:	b943      	cbnz	r3, 8001496 <__swbuf_r+0x32>
 8001484:	4621      	mov	r1, r4
 8001486:	4628      	mov	r0, r5
 8001488:	f000 f82a 	bl	80014e0 <__swsetup_r>
 800148c:	b118      	cbz	r0, 8001496 <__swbuf_r+0x32>
 800148e:	f04f 37ff 	mov.w	r7, #4294967295
 8001492:	4638      	mov	r0, r7
 8001494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001496:	6823      	ldr	r3, [r4, #0]
 8001498:	6922      	ldr	r2, [r4, #16]
 800149a:	1a98      	subs	r0, r3, r2
 800149c:	6963      	ldr	r3, [r4, #20]
 800149e:	b2f6      	uxtb	r6, r6
 80014a0:	4283      	cmp	r3, r0
 80014a2:	4637      	mov	r7, r6
 80014a4:	dc05      	bgt.n	80014b2 <__swbuf_r+0x4e>
 80014a6:	4621      	mov	r1, r4
 80014a8:	4628      	mov	r0, r5
 80014aa:	f7ff ff6d 	bl	8001388 <_fflush_r>
 80014ae:	2800      	cmp	r0, #0
 80014b0:	d1ed      	bne.n	800148e <__swbuf_r+0x2a>
 80014b2:	68a3      	ldr	r3, [r4, #8]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	60a3      	str	r3, [r4, #8]
 80014b8:	6823      	ldr	r3, [r4, #0]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	6022      	str	r2, [r4, #0]
 80014be:	701e      	strb	r6, [r3, #0]
 80014c0:	6962      	ldr	r2, [r4, #20]
 80014c2:	1c43      	adds	r3, r0, #1
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d004      	beq.n	80014d2 <__swbuf_r+0x6e>
 80014c8:	89a3      	ldrh	r3, [r4, #12]
 80014ca:	07db      	lsls	r3, r3, #31
 80014cc:	d5e1      	bpl.n	8001492 <__swbuf_r+0x2e>
 80014ce:	2e0a      	cmp	r6, #10
 80014d0:	d1df      	bne.n	8001492 <__swbuf_r+0x2e>
 80014d2:	4621      	mov	r1, r4
 80014d4:	4628      	mov	r0, r5
 80014d6:	f7ff ff57 	bl	8001388 <_fflush_r>
 80014da:	2800      	cmp	r0, #0
 80014dc:	d0d9      	beq.n	8001492 <__swbuf_r+0x2e>
 80014de:	e7d6      	b.n	800148e <__swbuf_r+0x2a>

080014e0 <__swsetup_r>:
 80014e0:	b538      	push	{r3, r4, r5, lr}
 80014e2:	4b29      	ldr	r3, [pc, #164]	@ (8001588 <__swsetup_r+0xa8>)
 80014e4:	4605      	mov	r5, r0
 80014e6:	6818      	ldr	r0, [r3, #0]
 80014e8:	460c      	mov	r4, r1
 80014ea:	b118      	cbz	r0, 80014f4 <__swsetup_r+0x14>
 80014ec:	6a03      	ldr	r3, [r0, #32]
 80014ee:	b90b      	cbnz	r3, 80014f4 <__swsetup_r+0x14>
 80014f0:	f7ff f9ca 	bl	8000888 <__sinit>
 80014f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014f8:	0719      	lsls	r1, r3, #28
 80014fa:	d422      	bmi.n	8001542 <__swsetup_r+0x62>
 80014fc:	06da      	lsls	r2, r3, #27
 80014fe:	d407      	bmi.n	8001510 <__swsetup_r+0x30>
 8001500:	2209      	movs	r2, #9
 8001502:	602a      	str	r2, [r5, #0]
 8001504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001508:	81a3      	strh	r3, [r4, #12]
 800150a:	f04f 30ff 	mov.w	r0, #4294967295
 800150e:	e033      	b.n	8001578 <__swsetup_r+0x98>
 8001510:	0758      	lsls	r0, r3, #29
 8001512:	d512      	bpl.n	800153a <__swsetup_r+0x5a>
 8001514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001516:	b141      	cbz	r1, 800152a <__swsetup_r+0x4a>
 8001518:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800151c:	4299      	cmp	r1, r3
 800151e:	d002      	beq.n	8001526 <__swsetup_r+0x46>
 8001520:	4628      	mov	r0, r5
 8001522:	f7ff fadf 	bl	8000ae4 <_free_r>
 8001526:	2300      	movs	r3, #0
 8001528:	6363      	str	r3, [r4, #52]	@ 0x34
 800152a:	89a3      	ldrh	r3, [r4, #12]
 800152c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001530:	81a3      	strh	r3, [r4, #12]
 8001532:	2300      	movs	r3, #0
 8001534:	6063      	str	r3, [r4, #4]
 8001536:	6923      	ldr	r3, [r4, #16]
 8001538:	6023      	str	r3, [r4, #0]
 800153a:	89a3      	ldrh	r3, [r4, #12]
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	81a3      	strh	r3, [r4, #12]
 8001542:	6923      	ldr	r3, [r4, #16]
 8001544:	b94b      	cbnz	r3, 800155a <__swsetup_r+0x7a>
 8001546:	89a3      	ldrh	r3, [r4, #12]
 8001548:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800154c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001550:	d003      	beq.n	800155a <__swsetup_r+0x7a>
 8001552:	4621      	mov	r1, r4
 8001554:	4628      	mov	r0, r5
 8001556:	f000 f856 	bl	8001606 <__smakebuf_r>
 800155a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800155e:	f013 0201 	ands.w	r2, r3, #1
 8001562:	d00a      	beq.n	800157a <__swsetup_r+0x9a>
 8001564:	2200      	movs	r2, #0
 8001566:	60a2      	str	r2, [r4, #8]
 8001568:	6962      	ldr	r2, [r4, #20]
 800156a:	4252      	negs	r2, r2
 800156c:	61a2      	str	r2, [r4, #24]
 800156e:	6922      	ldr	r2, [r4, #16]
 8001570:	b942      	cbnz	r2, 8001584 <__swsetup_r+0xa4>
 8001572:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001576:	d1c5      	bne.n	8001504 <__swsetup_r+0x24>
 8001578:	bd38      	pop	{r3, r4, r5, pc}
 800157a:	0799      	lsls	r1, r3, #30
 800157c:	bf58      	it	pl
 800157e:	6962      	ldrpl	r2, [r4, #20]
 8001580:	60a2      	str	r2, [r4, #8]
 8001582:	e7f4      	b.n	800156e <__swsetup_r+0x8e>
 8001584:	2000      	movs	r0, #0
 8001586:	e7f7      	b.n	8001578 <__swsetup_r+0x98>
 8001588:	20000054 	.word	0x20000054

0800158c <_sbrk_r>:
 800158c:	b538      	push	{r3, r4, r5, lr}
 800158e:	4d06      	ldr	r5, [pc, #24]	@ (80015a8 <_sbrk_r+0x1c>)
 8001590:	2300      	movs	r3, #0
 8001592:	4604      	mov	r4, r0
 8001594:	4608      	mov	r0, r1
 8001596:	602b      	str	r3, [r5, #0]
 8001598:	f7ff f84c 	bl	8000634 <_sbrk>
 800159c:	1c43      	adds	r3, r0, #1
 800159e:	d102      	bne.n	80015a6 <_sbrk_r+0x1a>
 80015a0:	682b      	ldr	r3, [r5, #0]
 80015a2:	b103      	cbz	r3, 80015a6 <_sbrk_r+0x1a>
 80015a4:	6023      	str	r3, [r4, #0]
 80015a6:	bd38      	pop	{r3, r4, r5, pc}
 80015a8:	20000200 	.word	0x20000200

080015ac <abort>:
 80015ac:	b508      	push	{r3, lr}
 80015ae:	2006      	movs	r0, #6
 80015b0:	f000 f88e 	bl	80016d0 <raise>
 80015b4:	2001      	movs	r0, #1
 80015b6:	f7fe ffc5 	bl	8000544 <_exit>

080015ba <__swhatbuf_r>:
 80015ba:	b570      	push	{r4, r5, r6, lr}
 80015bc:	460c      	mov	r4, r1
 80015be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015c2:	2900      	cmp	r1, #0
 80015c4:	b096      	sub	sp, #88	@ 0x58
 80015c6:	4615      	mov	r5, r2
 80015c8:	461e      	mov	r6, r3
 80015ca:	da0d      	bge.n	80015e8 <__swhatbuf_r+0x2e>
 80015cc:	89a3      	ldrh	r3, [r4, #12]
 80015ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80015d2:	f04f 0100 	mov.w	r1, #0
 80015d6:	bf14      	ite	ne
 80015d8:	2340      	movne	r3, #64	@ 0x40
 80015da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80015de:	2000      	movs	r0, #0
 80015e0:	6031      	str	r1, [r6, #0]
 80015e2:	602b      	str	r3, [r5, #0]
 80015e4:	b016      	add	sp, #88	@ 0x58
 80015e6:	bd70      	pop	{r4, r5, r6, pc}
 80015e8:	466a      	mov	r2, sp
 80015ea:	f000 f879 	bl	80016e0 <_fstat_r>
 80015ee:	2800      	cmp	r0, #0
 80015f0:	dbec      	blt.n	80015cc <__swhatbuf_r+0x12>
 80015f2:	9901      	ldr	r1, [sp, #4]
 80015f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80015f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80015fc:	4259      	negs	r1, r3
 80015fe:	4159      	adcs	r1, r3
 8001600:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001604:	e7eb      	b.n	80015de <__swhatbuf_r+0x24>

08001606 <__smakebuf_r>:
 8001606:	898b      	ldrh	r3, [r1, #12]
 8001608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800160a:	079d      	lsls	r5, r3, #30
 800160c:	4606      	mov	r6, r0
 800160e:	460c      	mov	r4, r1
 8001610:	d507      	bpl.n	8001622 <__smakebuf_r+0x1c>
 8001612:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001616:	6023      	str	r3, [r4, #0]
 8001618:	6123      	str	r3, [r4, #16]
 800161a:	2301      	movs	r3, #1
 800161c:	6163      	str	r3, [r4, #20]
 800161e:	b003      	add	sp, #12
 8001620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001622:	ab01      	add	r3, sp, #4
 8001624:	466a      	mov	r2, sp
 8001626:	f7ff ffc8 	bl	80015ba <__swhatbuf_r>
 800162a:	9f00      	ldr	r7, [sp, #0]
 800162c:	4605      	mov	r5, r0
 800162e:	4639      	mov	r1, r7
 8001630:	4630      	mov	r0, r6
 8001632:	f7ff facb 	bl	8000bcc <_malloc_r>
 8001636:	b948      	cbnz	r0, 800164c <__smakebuf_r+0x46>
 8001638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800163c:	059a      	lsls	r2, r3, #22
 800163e:	d4ee      	bmi.n	800161e <__smakebuf_r+0x18>
 8001640:	f023 0303 	bic.w	r3, r3, #3
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	81a3      	strh	r3, [r4, #12]
 800164a:	e7e2      	b.n	8001612 <__smakebuf_r+0xc>
 800164c:	89a3      	ldrh	r3, [r4, #12]
 800164e:	6020      	str	r0, [r4, #0]
 8001650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001654:	81a3      	strh	r3, [r4, #12]
 8001656:	9b01      	ldr	r3, [sp, #4]
 8001658:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800165c:	b15b      	cbz	r3, 8001676 <__smakebuf_r+0x70>
 800165e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001662:	4630      	mov	r0, r6
 8001664:	f000 f84e 	bl	8001704 <_isatty_r>
 8001668:	b128      	cbz	r0, 8001676 <__smakebuf_r+0x70>
 800166a:	89a3      	ldrh	r3, [r4, #12]
 800166c:	f023 0303 	bic.w	r3, r3, #3
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	81a3      	strh	r3, [r4, #12]
 8001676:	89a3      	ldrh	r3, [r4, #12]
 8001678:	431d      	orrs	r5, r3
 800167a:	81a5      	strh	r5, [r4, #12]
 800167c:	e7cf      	b.n	800161e <__smakebuf_r+0x18>

0800167e <_raise_r>:
 800167e:	291f      	cmp	r1, #31
 8001680:	b538      	push	{r3, r4, r5, lr}
 8001682:	4605      	mov	r5, r0
 8001684:	460c      	mov	r4, r1
 8001686:	d904      	bls.n	8001692 <_raise_r+0x14>
 8001688:	2316      	movs	r3, #22
 800168a:	6003      	str	r3, [r0, #0]
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	bd38      	pop	{r3, r4, r5, pc}
 8001692:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8001694:	b112      	cbz	r2, 800169c <_raise_r+0x1e>
 8001696:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800169a:	b94b      	cbnz	r3, 80016b0 <_raise_r+0x32>
 800169c:	4628      	mov	r0, r5
 800169e:	f000 f853 	bl	8001748 <_getpid_r>
 80016a2:	4622      	mov	r2, r4
 80016a4:	4601      	mov	r1, r0
 80016a6:	4628      	mov	r0, r5
 80016a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016ac:	f000 b83a 	b.w	8001724 <_kill_r>
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d00a      	beq.n	80016ca <_raise_r+0x4c>
 80016b4:	1c59      	adds	r1, r3, #1
 80016b6:	d103      	bne.n	80016c0 <_raise_r+0x42>
 80016b8:	2316      	movs	r3, #22
 80016ba:	6003      	str	r3, [r0, #0]
 80016bc:	2001      	movs	r0, #1
 80016be:	e7e7      	b.n	8001690 <_raise_r+0x12>
 80016c0:	2100      	movs	r1, #0
 80016c2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80016c6:	4620      	mov	r0, r4
 80016c8:	4798      	blx	r3
 80016ca:	2000      	movs	r0, #0
 80016cc:	e7e0      	b.n	8001690 <_raise_r+0x12>
	...

080016d0 <raise>:
 80016d0:	4b02      	ldr	r3, [pc, #8]	@ (80016dc <raise+0xc>)
 80016d2:	4601      	mov	r1, r0
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	f7ff bfd2 	b.w	800167e <_raise_r>
 80016da:	bf00      	nop
 80016dc:	20000054 	.word	0x20000054

080016e0 <_fstat_r>:
 80016e0:	b538      	push	{r3, r4, r5, lr}
 80016e2:	4d07      	ldr	r5, [pc, #28]	@ (8001700 <_fstat_r+0x20>)
 80016e4:	2300      	movs	r3, #0
 80016e6:	4604      	mov	r4, r0
 80016e8:	4608      	mov	r0, r1
 80016ea:	4611      	mov	r1, r2
 80016ec:	602b      	str	r3, [r5, #0]
 80016ee:	f7fe ff79 	bl	80005e4 <_fstat>
 80016f2:	1c43      	adds	r3, r0, #1
 80016f4:	d102      	bne.n	80016fc <_fstat_r+0x1c>
 80016f6:	682b      	ldr	r3, [r5, #0]
 80016f8:	b103      	cbz	r3, 80016fc <_fstat_r+0x1c>
 80016fa:	6023      	str	r3, [r4, #0]
 80016fc:	bd38      	pop	{r3, r4, r5, pc}
 80016fe:	bf00      	nop
 8001700:	20000200 	.word	0x20000200

08001704 <_isatty_r>:
 8001704:	b538      	push	{r3, r4, r5, lr}
 8001706:	4d06      	ldr	r5, [pc, #24]	@ (8001720 <_isatty_r+0x1c>)
 8001708:	2300      	movs	r3, #0
 800170a:	4604      	mov	r4, r0
 800170c:	4608      	mov	r0, r1
 800170e:	602b      	str	r3, [r5, #0]
 8001710:	f7fe ff78 	bl	8000604 <_isatty>
 8001714:	1c43      	adds	r3, r0, #1
 8001716:	d102      	bne.n	800171e <_isatty_r+0x1a>
 8001718:	682b      	ldr	r3, [r5, #0]
 800171a:	b103      	cbz	r3, 800171e <_isatty_r+0x1a>
 800171c:	6023      	str	r3, [r4, #0]
 800171e:	bd38      	pop	{r3, r4, r5, pc}
 8001720:	20000200 	.word	0x20000200

08001724 <_kill_r>:
 8001724:	b538      	push	{r3, r4, r5, lr}
 8001726:	4d07      	ldr	r5, [pc, #28]	@ (8001744 <_kill_r+0x20>)
 8001728:	2300      	movs	r3, #0
 800172a:	4604      	mov	r4, r0
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	602b      	str	r3, [r5, #0]
 8001732:	f7fe fef7 	bl	8000524 <_kill>
 8001736:	1c43      	adds	r3, r0, #1
 8001738:	d102      	bne.n	8001740 <_kill_r+0x1c>
 800173a:	682b      	ldr	r3, [r5, #0]
 800173c:	b103      	cbz	r3, 8001740 <_kill_r+0x1c>
 800173e:	6023      	str	r3, [r4, #0]
 8001740:	bd38      	pop	{r3, r4, r5, pc}
 8001742:	bf00      	nop
 8001744:	20000200 	.word	0x20000200

08001748 <_getpid_r>:
 8001748:	f7fe bee4 	b.w	8000514 <_getpid>

0800174c <_init>:
 800174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174e:	bf00      	nop
 8001750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001752:	bc08      	pop	{r3}
 8001754:	469e      	mov	lr, r3
 8001756:	4770      	bx	lr

08001758 <_fini>:
 8001758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175a:	bf00      	nop
 800175c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800175e:	bc08      	pop	{r3}
 8001760:	469e      	mov	lr, r3
 8001762:	4770      	bx	lr
