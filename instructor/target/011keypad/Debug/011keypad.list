
011keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e44  080001a8  080001a8  000011a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000fec  08000fec  00001fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800102c  0800102c  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  0800102c  0800102c  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800102c  0800102c  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800102c  0800102c  0000202c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001030  08001030  00002030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001034  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001090  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001090  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009a3  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000346  00000000  00000000  00003a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  00003d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000c5  00000000  00000000  00003e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d38  00000000  00000000  00003f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001593  00000000  00000000  00006c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009952  00000000  00000000  00008228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00011b7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009fc  00000000  00000000  00011bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000125bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	@ (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	@ (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000005c 	.word	0x2000005c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000fd4 	.word	0x08000fd4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	@ (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	@ (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	@ (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000060 	.word	0x20000060
 80001e4:	08000fd4 	.word	0x08000fd4

080001e8 <delay>:

#include<stdint.h>
#include<stdio.h>

void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i =0 ; i < 300000 ; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	@ (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>

}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	000493df 	.word	0x000493df

08000214 <main>:

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
	//peripheral register addresses
	uint32_t volatile *const pGPIODModeReg  =  (uint32_t*)(0x40020C00);
 800021a:	4b88      	ldr	r3, [pc, #544]	@ (800043c <main+0x228>)
 800021c:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const pInPutDataReg  =  (uint32_t*)(0x40020C00+0x10);
 800021e:	4b88      	ldr	r3, [pc, #544]	@ (8000440 <main+0x22c>)
 8000220:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const pOutPutDataReg =  (uint32_t*)(0x40020C00+0x14);
 8000222:	4b88      	ldr	r3, [pc, #544]	@ (8000444 <main+0x230>)
 8000224:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const pClockCtrlReg  =  (uint32_t*)(0x40023800+0x30);
 8000226:	4b88      	ldr	r3, [pc, #544]	@ (8000448 <main+0x234>)
 8000228:	60bb      	str	r3, [r7, #8]
	uint32_t volatile *const pPullupDownReg =  (uint32_t*)(0x40020C00 + 0x0C);
 800022a:	4b88      	ldr	r3, [pc, #544]	@ (800044c <main+0x238>)
 800022c:	607b      	str	r3, [r7, #4]

     //1.Enable the peripheral clock of GPIOD peripheral
	*pClockCtrlReg |= ( 1 << 3);
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 0208 	orr.w	r2, r3, #8
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	601a      	str	r2, [r3, #0]


    // 2.configure PD0,PD1,PD2,PD3 as output (rows)
	*pGPIODModeReg &= ~(0xFF); //clear
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	601a      	str	r2, [r3, #0]
	*pGPIODModeReg |= 0x55;   //set
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f043 0255 	orr.w	r2, r3, #85	@ 0x55
 800024e:	697b      	ldr	r3, [r7, #20]
 8000250:	601a      	str	r2, [r3, #0]


	// 3. configure PD8 , PD9, PD10, PD11 as input (columns)
    *pGPIODModeReg &= ~(0xFF << 16);
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	601a      	str	r2, [r3, #0]

	// 4.Enable internal pull-up resistors for PD8 PD9 PD10 PD11
    *pPullupDownReg &= ~(0xFF << 16);
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	601a      	str	r2, [r3, #0]
    *pPullupDownReg |=  (0x55 << 16);
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f443 02aa 	orr.w	r2, r3, #5570560	@ 0x550000
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	601a      	str	r2, [r3, #0]

while(1)
{
    //make all rows HIGH
    *pOutPutDataReg |= 0x0f;
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f043 020f 	orr.w	r2, r3, #15
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	601a      	str	r2, [r3, #0]

    //make R1 LOW(PD0)
    *pOutPutDataReg &= ~( 1 << 0);
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f023 0201 	bic.w	r2, r3, #1
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	601a      	str	r2, [r3, #0]

    //scan the columns
    //check C1(PD8) low or high
    if(!(*pInPutDataReg & ( 1 << 8))){
 800028e:	693b      	ldr	r3, [r7, #16]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000296:	2b00      	cmp	r3, #0
 8000298:	d104      	bne.n	80002a4 <main+0x90>
    	//key is pressed
    	delay();
 800029a:	f7ff ffa5 	bl	80001e8 <delay>
    	printf("1\n");
 800029e:	486c      	ldr	r0, [pc, #432]	@ (8000450 <main+0x23c>)
 80002a0:	f000 fb04 	bl	80008ac <puts>
    }

    //check C2(PD9) low or high
    if(!(*pInPutDataReg & ( 1 << 9))){
 80002a4:	693b      	ldr	r3, [r7, #16]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d104      	bne.n	80002ba <main+0xa6>
    	//key is pressed
    	delay();
 80002b0:	f7ff ff9a 	bl	80001e8 <delay>
    	printf("2\n");
 80002b4:	4867      	ldr	r0, [pc, #412]	@ (8000454 <main+0x240>)
 80002b6:	f000 faf9 	bl	80008ac <puts>
    }

    //check C3(PD10) low or high
    if(!(*pInPutDataReg & ( 1 << 10))){
 80002ba:	693b      	ldr	r3, [r7, #16]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d104      	bne.n	80002d0 <main+0xbc>
    	//key is pressed
    	delay();
 80002c6:	f7ff ff8f 	bl	80001e8 <delay>
    	printf("3\n");
 80002ca:	4863      	ldr	r0, [pc, #396]	@ (8000458 <main+0x244>)
 80002cc:	f000 faee 	bl	80008ac <puts>
    }

    //check C4(PD11) low or high
    if(!(*pInPutDataReg & ( 1 << 11))){
 80002d0:	693b      	ldr	r3, [r7, #16]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d104      	bne.n	80002e6 <main+0xd2>
    	//key is pressed
    	delay();
 80002dc:	f7ff ff84 	bl	80001e8 <delay>
    	printf("A\n");
 80002e0:	485e      	ldr	r0, [pc, #376]	@ (800045c <main+0x248>)
 80002e2:	f000 fae3 	bl	80008ac <puts>
    }


    //make all rows HIGH
     *pOutPutDataReg |= 0x0f;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f043 020f 	orr.w	r2, r3, #15
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	601a      	str	r2, [r3, #0]
    //make R2 LOW(PD1)
    *pOutPutDataReg &= ~( 1 << 1);
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f023 0202 	bic.w	r2, r3, #2
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	601a      	str	r2, [r3, #0]

    //scan the columns
    //check C1(PD8) low or high
    if(!(*pInPutDataReg & ( 1 << 8))){
 80002fe:	693b      	ldr	r3, [r7, #16]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000306:	2b00      	cmp	r3, #0
 8000308:	d104      	bne.n	8000314 <main+0x100>
    	//key is pressed
    	delay();
 800030a:	f7ff ff6d 	bl	80001e8 <delay>
    	printf("4\n");
 800030e:	4854      	ldr	r0, [pc, #336]	@ (8000460 <main+0x24c>)
 8000310:	f000 facc 	bl	80008ac <puts>
    }

    //check C2(PD9) low or high
    if(!(*pInPutDataReg & ( 1 << 9))){
 8000314:	693b      	ldr	r3, [r7, #16]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800031c:	2b00      	cmp	r3, #0
 800031e:	d104      	bne.n	800032a <main+0x116>
    	//key is pressed
    	delay();
 8000320:	f7ff ff62 	bl	80001e8 <delay>
    	printf("5\n");
 8000324:	484f      	ldr	r0, [pc, #316]	@ (8000464 <main+0x250>)
 8000326:	f000 fac1 	bl	80008ac <puts>
    }

    //check C3(PD10) low or high
    if(!(*pInPutDataReg & ( 1 << 10))){
 800032a:	693b      	ldr	r3, [r7, #16]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000332:	2b00      	cmp	r3, #0
 8000334:	d104      	bne.n	8000340 <main+0x12c>
    	//key is pressed
    	delay();
 8000336:	f7ff ff57 	bl	80001e8 <delay>
    	printf("6\n");
 800033a:	484b      	ldr	r0, [pc, #300]	@ (8000468 <main+0x254>)
 800033c:	f000 fab6 	bl	80008ac <puts>
    }

    //check C4(PD11) low or high
    if(!(*pInPutDataReg & ( 1 << 11))){
 8000340:	693b      	ldr	r3, [r7, #16]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000348:	2b00      	cmp	r3, #0
 800034a:	d104      	bne.n	8000356 <main+0x142>
    	//key is pressed
    	delay();
 800034c:	f7ff ff4c 	bl	80001e8 <delay>
    	printf("B\n");
 8000350:	4846      	ldr	r0, [pc, #280]	@ (800046c <main+0x258>)
 8000352:	f000 faab 	bl	80008ac <puts>
    }

    //make all rows HIGH
     *pOutPutDataReg |= 0x0f;
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f043 020f 	orr.w	r2, r3, #15
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
    //make R3 LOW(PD2)
    *pOutPutDataReg &= ~( 1 << 2);
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f023 0204 	bic.w	r2, r3, #4
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

    //scan the columns
    //check C1(PD8) low or high
    if(!(*pInPutDataReg & ( 1 << 8))){
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000376:	2b00      	cmp	r3, #0
 8000378:	d104      	bne.n	8000384 <main+0x170>
    	//key is pressed
    	delay();
 800037a:	f7ff ff35 	bl	80001e8 <delay>
    	printf("7\n");
 800037e:	483c      	ldr	r0, [pc, #240]	@ (8000470 <main+0x25c>)
 8000380:	f000 fa94 	bl	80008ac <puts>
    }

    //check C2(PD9) low or high
    if(!(*pInPutDataReg & ( 1 << 9))){
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800038c:	2b00      	cmp	r3, #0
 800038e:	d104      	bne.n	800039a <main+0x186>
    	//key is pressed
    	delay();
 8000390:	f7ff ff2a 	bl	80001e8 <delay>
    	printf("8\n");
 8000394:	4837      	ldr	r0, [pc, #220]	@ (8000474 <main+0x260>)
 8000396:	f000 fa89 	bl	80008ac <puts>
    }

    //check C3(PD10) low or high
    if(!(*pInPutDataReg & ( 1 << 10))){
 800039a:	693b      	ldr	r3, [r7, #16]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d104      	bne.n	80003b0 <main+0x19c>
    	//key is pressed
    	delay();
 80003a6:	f7ff ff1f 	bl	80001e8 <delay>
    	printf("9\n");
 80003aa:	4833      	ldr	r0, [pc, #204]	@ (8000478 <main+0x264>)
 80003ac:	f000 fa7e 	bl	80008ac <puts>
    }

    //check C4(PD11) low or high
    if(!(*pInPutDataReg & ( 1 << 11))){
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d104      	bne.n	80003c6 <main+0x1b2>
    	//key is pressed
    	delay();
 80003bc:	f7ff ff14 	bl	80001e8 <delay>
    	printf("C\n");
 80003c0:	482e      	ldr	r0, [pc, #184]	@ (800047c <main+0x268>)
 80003c2:	f000 fa73 	bl	80008ac <puts>
    }

    //make all rows HIGH
     *pOutPutDataReg |= 0x0f;
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f043 020f 	orr.w	r2, r3, #15
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	601a      	str	r2, [r3, #0]
    //make R4 LOW(PD2)
    *pOutPutDataReg &= ~( 1 << 3);
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f023 0208 	bic.w	r2, r3, #8
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	601a      	str	r2, [r3, #0]

    //scan the columns
    //check C1(PD8) low or high
    if(!(*pInPutDataReg & ( 1 << 8))){
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d104      	bne.n	80003f4 <main+0x1e0>
    	//key is pressed
    	delay();
 80003ea:	f7ff fefd 	bl	80001e8 <delay>
    	printf("*\n");
 80003ee:	4824      	ldr	r0, [pc, #144]	@ (8000480 <main+0x26c>)
 80003f0:	f000 fa5c 	bl	80008ac <puts>
    }

    //check C2(PD9) low or high
    if(!(*pInPutDataReg & ( 1 << 9))){
 80003f4:	693b      	ldr	r3, [r7, #16]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d104      	bne.n	800040a <main+0x1f6>
    	//key is pressed
    	delay();
 8000400:	f7ff fef2 	bl	80001e8 <delay>
    	printf("0\n");
 8000404:	481f      	ldr	r0, [pc, #124]	@ (8000484 <main+0x270>)
 8000406:	f000 fa51 	bl	80008ac <puts>
    }

    //check C3(PD10) low or high
    if(!(*pInPutDataReg & ( 1 << 10))){
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000412:	2b00      	cmp	r3, #0
 8000414:	d104      	bne.n	8000420 <main+0x20c>
    	//key is pressed
    	delay();
 8000416:	f7ff fee7 	bl	80001e8 <delay>
    	printf("#\n");
 800041a:	481b      	ldr	r0, [pc, #108]	@ (8000488 <main+0x274>)
 800041c:	f000 fa46 	bl	80008ac <puts>
    }

    //check C4(PD11) low or high
    if(!(*pInPutDataReg & ( 1 << 11))){
 8000420:	693b      	ldr	r3, [r7, #16]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000428:	2b00      	cmp	r3, #0
 800042a:	f47f af24 	bne.w	8000276 <main+0x62>
    	//key is pressed
    	delay();
 800042e:	f7ff fedb 	bl	80001e8 <delay>
    	printf("D\n");
 8000432:	4816      	ldr	r0, [pc, #88]	@ (800048c <main+0x278>)
 8000434:	f000 fa3a 	bl	80008ac <puts>
    *pOutPutDataReg |= 0x0f;
 8000438:	e71d      	b.n	8000276 <main+0x62>
 800043a:	bf00      	nop
 800043c:	40020c00 	.word	0x40020c00
 8000440:	40020c10 	.word	0x40020c10
 8000444:	40020c14 	.word	0x40020c14
 8000448:	40023830 	.word	0x40023830
 800044c:	40020c0c 	.word	0x40020c0c
 8000450:	08000fec 	.word	0x08000fec
 8000454:	08000ff0 	.word	0x08000ff0
 8000458:	08000ff4 	.word	0x08000ff4
 800045c:	08000ff8 	.word	0x08000ff8
 8000460:	08000ffc 	.word	0x08000ffc
 8000464:	08001000 	.word	0x08001000
 8000468:	08001004 	.word	0x08001004
 800046c:	08001008 	.word	0x08001008
 8000470:	0800100c 	.word	0x0800100c
 8000474:	08001010 	.word	0x08001010
 8000478:	08001014 	.word	0x08001014
 800047c:	08001018 	.word	0x08001018
 8000480:	0800101c 	.word	0x0800101c
 8000484:	08001020 	.word	0x08001020
 8000488:	08001024 	.word	0x08001024
 800048c:	08001028 	.word	0x08001028

08000490 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800049a:	4b0f      	ldr	r3, [pc, #60]	@ (80004d8 <ITM_SendChar+0x48>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a0e      	ldr	r2, [pc, #56]	@ (80004d8 <ITM_SendChar+0x48>)
 80004a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004a4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004a6:	4b0d      	ldr	r3, [pc, #52]	@ (80004dc <ITM_SendChar+0x4c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a0c      	ldr	r2, [pc, #48]	@ (80004dc <ITM_SendChar+0x4c>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004b2:	bf00      	nop
 80004b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d0f8      	beq.n	80004b4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004c2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	6013      	str	r3, [r2, #0]
}
 80004ca:	bf00      	nop
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	e000edfc 	.word	0xe000edfc
 80004dc:	e0000e00 	.word	0xe0000e00

080004e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	e00a      	b.n	8000508 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004f2:	f3af 8000 	nop.w
 80004f6:	4601      	mov	r1, r0
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	1c5a      	adds	r2, r3, #1
 80004fc:	60ba      	str	r2, [r7, #8]
 80004fe:	b2ca      	uxtb	r2, r1
 8000500:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	3301      	adds	r3, #1
 8000506:	617b      	str	r3, [r7, #20]
 8000508:	697a      	ldr	r2, [r7, #20]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	429a      	cmp	r2, r3
 800050e:	dbf0      	blt.n	80004f2 <_read+0x12>
	}

return len;
 8000510:	687b      	ldr	r3, [r7, #4]
}
 8000512:	4618      	mov	r0, r3
 8000514:	3718      	adds	r7, #24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b086      	sub	sp, #24
 800051e:	af00      	add	r7, sp, #0
 8000520:	60f8      	str	r0, [r7, #12]
 8000522:	60b9      	str	r1, [r7, #8]
 8000524:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	e009      	b.n	8000540 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	60ba      	str	r2, [r7, #8]
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ffab 	bl	8000490 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	3301      	adds	r3, #1
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	429a      	cmp	r2, r3
 8000546:	dbf1      	blt.n	800052c <_write+0x12>
	}
	return len;
 8000548:	687b      	ldr	r3, [r7, #4]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3718      	adds	r7, #24
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <_close>:

int _close(int file)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
	return -1;
 800055a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800055e:	4618      	mov	r0, r3
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800057a:	605a      	str	r2, [r3, #4]
	return 0;
 800057c:	2300      	movs	r3, #0
}
 800057e:	4618      	mov	r0, r3
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr

0800058a <_isatty>:

int _isatty(int file)
{
 800058a:	b480      	push	{r7}
 800058c:	b083      	sub	sp, #12
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
	return 1;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
	return 0;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
	...

080005bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c4:	4a14      	ldr	r2, [pc, #80]	@ (8000618 <_sbrk+0x5c>)
 80005c6:	4b15      	ldr	r3, [pc, #84]	@ (800061c <_sbrk+0x60>)
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d0:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <_sbrk+0x64>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d102      	bne.n	80005de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d8:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <_sbrk+0x64>)
 80005da:	4a12      	ldr	r2, [pc, #72]	@ (8000624 <_sbrk+0x68>)
 80005dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005de:	4b10      	ldr	r3, [pc, #64]	@ (8000620 <_sbrk+0x64>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	693a      	ldr	r2, [r7, #16]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d207      	bcs.n	80005fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005ec:	f000 fa8c 	bl	8000b08 <__errno>
 80005f0:	4603      	mov	r3, r0
 80005f2:	220c      	movs	r2, #12
 80005f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	e009      	b.n	8000610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005fc:	4b08      	ldr	r3, [pc, #32]	@ (8000620 <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000602:	4b07      	ldr	r3, [pc, #28]	@ (8000620 <_sbrk+0x64>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	4a05      	ldr	r2, [pc, #20]	@ (8000620 <_sbrk+0x64>)
 800060c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800060e:	68fb      	ldr	r3, [r7, #12]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20020000 	.word	0x20020000
 800061c:	00000400 	.word	0x00000400
 8000620:	20000078 	.word	0x20000078
 8000624:	200001c8 	.word	0x200001c8

08000628 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000628:	480d      	ldr	r0, [pc, #52]	@ (8000660 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800062a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 800062c:	480d      	ldr	r0, [pc, #52]	@ (8000664 <LoopForever+0x6>)
  ldr r1, =_edata
 800062e:	490e      	ldr	r1, [pc, #56]	@ (8000668 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000630:	4a0e      	ldr	r2, [pc, #56]	@ (800066c <LoopForever+0xe>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000634:	e002      	b.n	800063c <LoopCopyDataInit>

08000636 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063a:	3304      	adds	r3, #4

0800063c <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 800063c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063e:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000640:	d3f9      	bcc.n	8000636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000642:	4a0b      	ldr	r2, [pc, #44]	@ (8000670 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000644:	4c0b      	ldr	r4, [pc, #44]	@ (8000674 <LoopForever+0x16>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000648:	e001      	b.n	800064e <LoopFillZerobss>

0800064a <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 800064a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800064c:	3204      	adds	r2, #4

0800064e <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 800064e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000650:	d3fb      	bcc.n	800064a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000652:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000656:	f000 fa5d 	bl	8000b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065a:	f7ff fddb 	bl	8000214 <main>

0800065e <LoopForever>:

LoopForever:
    b LoopForever
 800065e:	e7fe      	b.n	800065e <LoopForever>
  ldr   r0, =_estack
 8000660:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000668:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800066c:	08001034 	.word	0x08001034
  ldr r2, =_sbss
 8000670:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000674:	200001c8 	.word	0x200001c8

08000678 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000678:	e7fe      	b.n	8000678 <ADC_IRQHandler>
	...

0800067c <std>:
 800067c:	2300      	movs	r3, #0
 800067e:	b510      	push	{r4, lr}
 8000680:	4604      	mov	r4, r0
 8000682:	e9c0 3300 	strd	r3, r3, [r0]
 8000686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800068a:	6083      	str	r3, [r0, #8]
 800068c:	8181      	strh	r1, [r0, #12]
 800068e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000690:	81c2      	strh	r2, [r0, #14]
 8000692:	6183      	str	r3, [r0, #24]
 8000694:	4619      	mov	r1, r3
 8000696:	2208      	movs	r2, #8
 8000698:	305c      	adds	r0, #92	@ 0x5c
 800069a:	f000 f9e7 	bl	8000a6c <memset>
 800069e:	4b0d      	ldr	r3, [pc, #52]	@ (80006d4 <std+0x58>)
 80006a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80006a2:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <std+0x5c>)
 80006a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006a6:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <std+0x60>)
 80006a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80006aa:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <std+0x64>)
 80006ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80006ae:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <std+0x68>)
 80006b0:	6224      	str	r4, [r4, #32]
 80006b2:	429c      	cmp	r4, r3
 80006b4:	d006      	beq.n	80006c4 <std+0x48>
 80006b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006ba:	4294      	cmp	r4, r2
 80006bc:	d002      	beq.n	80006c4 <std+0x48>
 80006be:	33d0      	adds	r3, #208	@ 0xd0
 80006c0:	429c      	cmp	r4, r3
 80006c2:	d105      	bne.n	80006d0 <std+0x54>
 80006c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80006c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006cc:	f000 ba46 	b.w	8000b5c <__retarget_lock_init_recursive>
 80006d0:	bd10      	pop	{r4, pc}
 80006d2:	bf00      	nop
 80006d4:	080008bd 	.word	0x080008bd
 80006d8:	080008df 	.word	0x080008df
 80006dc:	08000917 	.word	0x08000917
 80006e0:	0800093b 	.word	0x0800093b
 80006e4:	2000007c 	.word	0x2000007c

080006e8 <stdio_exit_handler>:
 80006e8:	4a02      	ldr	r2, [pc, #8]	@ (80006f4 <stdio_exit_handler+0xc>)
 80006ea:	4903      	ldr	r1, [pc, #12]	@ (80006f8 <stdio_exit_handler+0x10>)
 80006ec:	4803      	ldr	r0, [pc, #12]	@ (80006fc <stdio_exit_handler+0x14>)
 80006ee:	f000 b869 	b.w	80007c4 <_fwalk_sglue>
 80006f2:	bf00      	nop
 80006f4:	20000000 	.word	0x20000000
 80006f8:	08000e5d 	.word	0x08000e5d
 80006fc:	20000010 	.word	0x20000010

08000700 <cleanup_stdio>:
 8000700:	6841      	ldr	r1, [r0, #4]
 8000702:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <cleanup_stdio+0x34>)
 8000704:	4299      	cmp	r1, r3
 8000706:	b510      	push	{r4, lr}
 8000708:	4604      	mov	r4, r0
 800070a:	d001      	beq.n	8000710 <cleanup_stdio+0x10>
 800070c:	f000 fba6 	bl	8000e5c <_fflush_r>
 8000710:	68a1      	ldr	r1, [r4, #8]
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <cleanup_stdio+0x38>)
 8000714:	4299      	cmp	r1, r3
 8000716:	d002      	beq.n	800071e <cleanup_stdio+0x1e>
 8000718:	4620      	mov	r0, r4
 800071a:	f000 fb9f 	bl	8000e5c <_fflush_r>
 800071e:	68e1      	ldr	r1, [r4, #12]
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <cleanup_stdio+0x3c>)
 8000722:	4299      	cmp	r1, r3
 8000724:	d004      	beq.n	8000730 <cleanup_stdio+0x30>
 8000726:	4620      	mov	r0, r4
 8000728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800072c:	f000 bb96 	b.w	8000e5c <_fflush_r>
 8000730:	bd10      	pop	{r4, pc}
 8000732:	bf00      	nop
 8000734:	2000007c 	.word	0x2000007c
 8000738:	200000e4 	.word	0x200000e4
 800073c:	2000014c 	.word	0x2000014c

08000740 <global_stdio_init.part.0>:
 8000740:	b510      	push	{r4, lr}
 8000742:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <global_stdio_init.part.0+0x30>)
 8000744:	4c0b      	ldr	r4, [pc, #44]	@ (8000774 <global_stdio_init.part.0+0x34>)
 8000746:	4a0c      	ldr	r2, [pc, #48]	@ (8000778 <global_stdio_init.part.0+0x38>)
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	4620      	mov	r0, r4
 800074c:	2200      	movs	r2, #0
 800074e:	2104      	movs	r1, #4
 8000750:	f7ff ff94 	bl	800067c <std>
 8000754:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000758:	2201      	movs	r2, #1
 800075a:	2109      	movs	r1, #9
 800075c:	f7ff ff8e 	bl	800067c <std>
 8000760:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000764:	2202      	movs	r2, #2
 8000766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800076a:	2112      	movs	r1, #18
 800076c:	f7ff bf86 	b.w	800067c <std>
 8000770:	200001b4 	.word	0x200001b4
 8000774:	2000007c 	.word	0x2000007c
 8000778:	080006e9 	.word	0x080006e9

0800077c <__sfp_lock_acquire>:
 800077c:	4801      	ldr	r0, [pc, #4]	@ (8000784 <__sfp_lock_acquire+0x8>)
 800077e:	f000 b9ee 	b.w	8000b5e <__retarget_lock_acquire_recursive>
 8000782:	bf00      	nop
 8000784:	200001bd 	.word	0x200001bd

08000788 <__sfp_lock_release>:
 8000788:	4801      	ldr	r0, [pc, #4]	@ (8000790 <__sfp_lock_release+0x8>)
 800078a:	f000 b9e9 	b.w	8000b60 <__retarget_lock_release_recursive>
 800078e:	bf00      	nop
 8000790:	200001bd 	.word	0x200001bd

08000794 <__sinit>:
 8000794:	b510      	push	{r4, lr}
 8000796:	4604      	mov	r4, r0
 8000798:	f7ff fff0 	bl	800077c <__sfp_lock_acquire>
 800079c:	6a23      	ldr	r3, [r4, #32]
 800079e:	b11b      	cbz	r3, 80007a8 <__sinit+0x14>
 80007a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007a4:	f7ff bff0 	b.w	8000788 <__sfp_lock_release>
 80007a8:	4b04      	ldr	r3, [pc, #16]	@ (80007bc <__sinit+0x28>)
 80007aa:	6223      	str	r3, [r4, #32]
 80007ac:	4b04      	ldr	r3, [pc, #16]	@ (80007c0 <__sinit+0x2c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d1f5      	bne.n	80007a0 <__sinit+0xc>
 80007b4:	f7ff ffc4 	bl	8000740 <global_stdio_init.part.0>
 80007b8:	e7f2      	b.n	80007a0 <__sinit+0xc>
 80007ba:	bf00      	nop
 80007bc:	08000701 	.word	0x08000701
 80007c0:	200001b4 	.word	0x200001b4

080007c4 <_fwalk_sglue>:
 80007c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007c8:	4607      	mov	r7, r0
 80007ca:	4688      	mov	r8, r1
 80007cc:	4614      	mov	r4, r2
 80007ce:	2600      	movs	r6, #0
 80007d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007d4:	f1b9 0901 	subs.w	r9, r9, #1
 80007d8:	d505      	bpl.n	80007e6 <_fwalk_sglue+0x22>
 80007da:	6824      	ldr	r4, [r4, #0]
 80007dc:	2c00      	cmp	r4, #0
 80007de:	d1f7      	bne.n	80007d0 <_fwalk_sglue+0xc>
 80007e0:	4630      	mov	r0, r6
 80007e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007e6:	89ab      	ldrh	r3, [r5, #12]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d907      	bls.n	80007fc <_fwalk_sglue+0x38>
 80007ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007f0:	3301      	adds	r3, #1
 80007f2:	d003      	beq.n	80007fc <_fwalk_sglue+0x38>
 80007f4:	4629      	mov	r1, r5
 80007f6:	4638      	mov	r0, r7
 80007f8:	47c0      	blx	r8
 80007fa:	4306      	orrs	r6, r0
 80007fc:	3568      	adds	r5, #104	@ 0x68
 80007fe:	e7e9      	b.n	80007d4 <_fwalk_sglue+0x10>

08000800 <_puts_r>:
 8000800:	6a03      	ldr	r3, [r0, #32]
 8000802:	b570      	push	{r4, r5, r6, lr}
 8000804:	6884      	ldr	r4, [r0, #8]
 8000806:	4605      	mov	r5, r0
 8000808:	460e      	mov	r6, r1
 800080a:	b90b      	cbnz	r3, 8000810 <_puts_r+0x10>
 800080c:	f7ff ffc2 	bl	8000794 <__sinit>
 8000810:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000812:	07db      	lsls	r3, r3, #31
 8000814:	d405      	bmi.n	8000822 <_puts_r+0x22>
 8000816:	89a3      	ldrh	r3, [r4, #12]
 8000818:	0598      	lsls	r0, r3, #22
 800081a:	d402      	bmi.n	8000822 <_puts_r+0x22>
 800081c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800081e:	f000 f99e 	bl	8000b5e <__retarget_lock_acquire_recursive>
 8000822:	89a3      	ldrh	r3, [r4, #12]
 8000824:	0719      	lsls	r1, r3, #28
 8000826:	d502      	bpl.n	800082e <_puts_r+0x2e>
 8000828:	6923      	ldr	r3, [r4, #16]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d135      	bne.n	800089a <_puts_r+0x9a>
 800082e:	4621      	mov	r1, r4
 8000830:	4628      	mov	r0, r5
 8000832:	f000 f8c5 	bl	80009c0 <__swsetup_r>
 8000836:	b380      	cbz	r0, 800089a <_puts_r+0x9a>
 8000838:	f04f 35ff 	mov.w	r5, #4294967295
 800083c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800083e:	07da      	lsls	r2, r3, #31
 8000840:	d405      	bmi.n	800084e <_puts_r+0x4e>
 8000842:	89a3      	ldrh	r3, [r4, #12]
 8000844:	059b      	lsls	r3, r3, #22
 8000846:	d402      	bmi.n	800084e <_puts_r+0x4e>
 8000848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800084a:	f000 f989 	bl	8000b60 <__retarget_lock_release_recursive>
 800084e:	4628      	mov	r0, r5
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	2b00      	cmp	r3, #0
 8000854:	da04      	bge.n	8000860 <_puts_r+0x60>
 8000856:	69a2      	ldr	r2, [r4, #24]
 8000858:	429a      	cmp	r2, r3
 800085a:	dc17      	bgt.n	800088c <_puts_r+0x8c>
 800085c:	290a      	cmp	r1, #10
 800085e:	d015      	beq.n	800088c <_puts_r+0x8c>
 8000860:	6823      	ldr	r3, [r4, #0]
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	6022      	str	r2, [r4, #0]
 8000866:	7019      	strb	r1, [r3, #0]
 8000868:	68a3      	ldr	r3, [r4, #8]
 800086a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800086e:	3b01      	subs	r3, #1
 8000870:	60a3      	str	r3, [r4, #8]
 8000872:	2900      	cmp	r1, #0
 8000874:	d1ed      	bne.n	8000852 <_puts_r+0x52>
 8000876:	2b00      	cmp	r3, #0
 8000878:	da11      	bge.n	800089e <_puts_r+0x9e>
 800087a:	4622      	mov	r2, r4
 800087c:	210a      	movs	r1, #10
 800087e:	4628      	mov	r0, r5
 8000880:	f000 f85f 	bl	8000942 <__swbuf_r>
 8000884:	3001      	adds	r0, #1
 8000886:	d0d7      	beq.n	8000838 <_puts_r+0x38>
 8000888:	250a      	movs	r5, #10
 800088a:	e7d7      	b.n	800083c <_puts_r+0x3c>
 800088c:	4622      	mov	r2, r4
 800088e:	4628      	mov	r0, r5
 8000890:	f000 f857 	bl	8000942 <__swbuf_r>
 8000894:	3001      	adds	r0, #1
 8000896:	d1e7      	bne.n	8000868 <_puts_r+0x68>
 8000898:	e7ce      	b.n	8000838 <_puts_r+0x38>
 800089a:	3e01      	subs	r6, #1
 800089c:	e7e4      	b.n	8000868 <_puts_r+0x68>
 800089e:	6823      	ldr	r3, [r4, #0]
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	6022      	str	r2, [r4, #0]
 80008a4:	220a      	movs	r2, #10
 80008a6:	701a      	strb	r2, [r3, #0]
 80008a8:	e7ee      	b.n	8000888 <_puts_r+0x88>
	...

080008ac <puts>:
 80008ac:	4b02      	ldr	r3, [pc, #8]	@ (80008b8 <puts+0xc>)
 80008ae:	4601      	mov	r1, r0
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	f7ff bfa5 	b.w	8000800 <_puts_r>
 80008b6:	bf00      	nop
 80008b8:	2000000c 	.word	0x2000000c

080008bc <__sread>:
 80008bc:	b510      	push	{r4, lr}
 80008be:	460c      	mov	r4, r1
 80008c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008c4:	f000 f8fc 	bl	8000ac0 <_read_r>
 80008c8:	2800      	cmp	r0, #0
 80008ca:	bfab      	itete	ge
 80008cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80008ce:	89a3      	ldrhlt	r3, [r4, #12]
 80008d0:	181b      	addge	r3, r3, r0
 80008d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80008d6:	bfac      	ite	ge
 80008d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80008da:	81a3      	strhlt	r3, [r4, #12]
 80008dc:	bd10      	pop	{r4, pc}

080008de <__swrite>:
 80008de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008e2:	461f      	mov	r7, r3
 80008e4:	898b      	ldrh	r3, [r1, #12]
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	4605      	mov	r5, r0
 80008ea:	460c      	mov	r4, r1
 80008ec:	4616      	mov	r6, r2
 80008ee:	d505      	bpl.n	80008fc <__swrite+0x1e>
 80008f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008f4:	2302      	movs	r3, #2
 80008f6:	2200      	movs	r2, #0
 80008f8:	f000 f8d0 	bl	8000a9c <_lseek_r>
 80008fc:	89a3      	ldrh	r3, [r4, #12]
 80008fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000902:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000906:	81a3      	strh	r3, [r4, #12]
 8000908:	4632      	mov	r2, r6
 800090a:	463b      	mov	r3, r7
 800090c:	4628      	mov	r0, r5
 800090e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000912:	f000 b8e7 	b.w	8000ae4 <_write_r>

08000916 <__sseek>:
 8000916:	b510      	push	{r4, lr}
 8000918:	460c      	mov	r4, r1
 800091a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800091e:	f000 f8bd 	bl	8000a9c <_lseek_r>
 8000922:	1c43      	adds	r3, r0, #1
 8000924:	89a3      	ldrh	r3, [r4, #12]
 8000926:	bf15      	itete	ne
 8000928:	6560      	strne	r0, [r4, #84]	@ 0x54
 800092a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800092e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000932:	81a3      	strheq	r3, [r4, #12]
 8000934:	bf18      	it	ne
 8000936:	81a3      	strhne	r3, [r4, #12]
 8000938:	bd10      	pop	{r4, pc}

0800093a <__sclose>:
 800093a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800093e:	f000 b89d 	b.w	8000a7c <_close_r>

08000942 <__swbuf_r>:
 8000942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000944:	460e      	mov	r6, r1
 8000946:	4614      	mov	r4, r2
 8000948:	4605      	mov	r5, r0
 800094a:	b118      	cbz	r0, 8000954 <__swbuf_r+0x12>
 800094c:	6a03      	ldr	r3, [r0, #32]
 800094e:	b90b      	cbnz	r3, 8000954 <__swbuf_r+0x12>
 8000950:	f7ff ff20 	bl	8000794 <__sinit>
 8000954:	69a3      	ldr	r3, [r4, #24]
 8000956:	60a3      	str	r3, [r4, #8]
 8000958:	89a3      	ldrh	r3, [r4, #12]
 800095a:	071a      	lsls	r2, r3, #28
 800095c:	d501      	bpl.n	8000962 <__swbuf_r+0x20>
 800095e:	6923      	ldr	r3, [r4, #16]
 8000960:	b943      	cbnz	r3, 8000974 <__swbuf_r+0x32>
 8000962:	4621      	mov	r1, r4
 8000964:	4628      	mov	r0, r5
 8000966:	f000 f82b 	bl	80009c0 <__swsetup_r>
 800096a:	b118      	cbz	r0, 8000974 <__swbuf_r+0x32>
 800096c:	f04f 37ff 	mov.w	r7, #4294967295
 8000970:	4638      	mov	r0, r7
 8000972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000974:	6823      	ldr	r3, [r4, #0]
 8000976:	6922      	ldr	r2, [r4, #16]
 8000978:	1a98      	subs	r0, r3, r2
 800097a:	6963      	ldr	r3, [r4, #20]
 800097c:	b2f6      	uxtb	r6, r6
 800097e:	4283      	cmp	r3, r0
 8000980:	4637      	mov	r7, r6
 8000982:	dc05      	bgt.n	8000990 <__swbuf_r+0x4e>
 8000984:	4621      	mov	r1, r4
 8000986:	4628      	mov	r0, r5
 8000988:	f000 fa68 	bl	8000e5c <_fflush_r>
 800098c:	2800      	cmp	r0, #0
 800098e:	d1ed      	bne.n	800096c <__swbuf_r+0x2a>
 8000990:	68a3      	ldr	r3, [r4, #8]
 8000992:	3b01      	subs	r3, #1
 8000994:	60a3      	str	r3, [r4, #8]
 8000996:	6823      	ldr	r3, [r4, #0]
 8000998:	1c5a      	adds	r2, r3, #1
 800099a:	6022      	str	r2, [r4, #0]
 800099c:	701e      	strb	r6, [r3, #0]
 800099e:	6962      	ldr	r2, [r4, #20]
 80009a0:	1c43      	adds	r3, r0, #1
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d004      	beq.n	80009b0 <__swbuf_r+0x6e>
 80009a6:	89a3      	ldrh	r3, [r4, #12]
 80009a8:	07db      	lsls	r3, r3, #31
 80009aa:	d5e1      	bpl.n	8000970 <__swbuf_r+0x2e>
 80009ac:	2e0a      	cmp	r6, #10
 80009ae:	d1df      	bne.n	8000970 <__swbuf_r+0x2e>
 80009b0:	4621      	mov	r1, r4
 80009b2:	4628      	mov	r0, r5
 80009b4:	f000 fa52 	bl	8000e5c <_fflush_r>
 80009b8:	2800      	cmp	r0, #0
 80009ba:	d0d9      	beq.n	8000970 <__swbuf_r+0x2e>
 80009bc:	e7d6      	b.n	800096c <__swbuf_r+0x2a>
	...

080009c0 <__swsetup_r>:
 80009c0:	b538      	push	{r3, r4, r5, lr}
 80009c2:	4b29      	ldr	r3, [pc, #164]	@ (8000a68 <__swsetup_r+0xa8>)
 80009c4:	4605      	mov	r5, r0
 80009c6:	6818      	ldr	r0, [r3, #0]
 80009c8:	460c      	mov	r4, r1
 80009ca:	b118      	cbz	r0, 80009d4 <__swsetup_r+0x14>
 80009cc:	6a03      	ldr	r3, [r0, #32]
 80009ce:	b90b      	cbnz	r3, 80009d4 <__swsetup_r+0x14>
 80009d0:	f7ff fee0 	bl	8000794 <__sinit>
 80009d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009d8:	0719      	lsls	r1, r3, #28
 80009da:	d422      	bmi.n	8000a22 <__swsetup_r+0x62>
 80009dc:	06da      	lsls	r2, r3, #27
 80009de:	d407      	bmi.n	80009f0 <__swsetup_r+0x30>
 80009e0:	2209      	movs	r2, #9
 80009e2:	602a      	str	r2, [r5, #0]
 80009e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009e8:	81a3      	strh	r3, [r4, #12]
 80009ea:	f04f 30ff 	mov.w	r0, #4294967295
 80009ee:	e033      	b.n	8000a58 <__swsetup_r+0x98>
 80009f0:	0758      	lsls	r0, r3, #29
 80009f2:	d512      	bpl.n	8000a1a <__swsetup_r+0x5a>
 80009f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80009f6:	b141      	cbz	r1, 8000a0a <__swsetup_r+0x4a>
 80009f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80009fc:	4299      	cmp	r1, r3
 80009fe:	d002      	beq.n	8000a06 <__swsetup_r+0x46>
 8000a00:	4628      	mov	r0, r5
 8000a02:	f000 f8af 	bl	8000b64 <_free_r>
 8000a06:	2300      	movs	r3, #0
 8000a08:	6363      	str	r3, [r4, #52]	@ 0x34
 8000a0a:	89a3      	ldrh	r3, [r4, #12]
 8000a0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000a10:	81a3      	strh	r3, [r4, #12]
 8000a12:	2300      	movs	r3, #0
 8000a14:	6063      	str	r3, [r4, #4]
 8000a16:	6923      	ldr	r3, [r4, #16]
 8000a18:	6023      	str	r3, [r4, #0]
 8000a1a:	89a3      	ldrh	r3, [r4, #12]
 8000a1c:	f043 0308 	orr.w	r3, r3, #8
 8000a20:	81a3      	strh	r3, [r4, #12]
 8000a22:	6923      	ldr	r3, [r4, #16]
 8000a24:	b94b      	cbnz	r3, 8000a3a <__swsetup_r+0x7a>
 8000a26:	89a3      	ldrh	r3, [r4, #12]
 8000a28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000a30:	d003      	beq.n	8000a3a <__swsetup_r+0x7a>
 8000a32:	4621      	mov	r1, r4
 8000a34:	4628      	mov	r0, r5
 8000a36:	f000 fa5f 	bl	8000ef8 <__smakebuf_r>
 8000a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a3e:	f013 0201 	ands.w	r2, r3, #1
 8000a42:	d00a      	beq.n	8000a5a <__swsetup_r+0x9a>
 8000a44:	2200      	movs	r2, #0
 8000a46:	60a2      	str	r2, [r4, #8]
 8000a48:	6962      	ldr	r2, [r4, #20]
 8000a4a:	4252      	negs	r2, r2
 8000a4c:	61a2      	str	r2, [r4, #24]
 8000a4e:	6922      	ldr	r2, [r4, #16]
 8000a50:	b942      	cbnz	r2, 8000a64 <__swsetup_r+0xa4>
 8000a52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000a56:	d1c5      	bne.n	80009e4 <__swsetup_r+0x24>
 8000a58:	bd38      	pop	{r3, r4, r5, pc}
 8000a5a:	0799      	lsls	r1, r3, #30
 8000a5c:	bf58      	it	pl
 8000a5e:	6962      	ldrpl	r2, [r4, #20]
 8000a60:	60a2      	str	r2, [r4, #8]
 8000a62:	e7f4      	b.n	8000a4e <__swsetup_r+0x8e>
 8000a64:	2000      	movs	r0, #0
 8000a66:	e7f7      	b.n	8000a58 <__swsetup_r+0x98>
 8000a68:	2000000c 	.word	0x2000000c

08000a6c <memset>:
 8000a6c:	4402      	add	r2, r0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d100      	bne.n	8000a76 <memset+0xa>
 8000a74:	4770      	bx	lr
 8000a76:	f803 1b01 	strb.w	r1, [r3], #1
 8000a7a:	e7f9      	b.n	8000a70 <memset+0x4>

08000a7c <_close_r>:
 8000a7c:	b538      	push	{r3, r4, r5, lr}
 8000a7e:	4d06      	ldr	r5, [pc, #24]	@ (8000a98 <_close_r+0x1c>)
 8000a80:	2300      	movs	r3, #0
 8000a82:	4604      	mov	r4, r0
 8000a84:	4608      	mov	r0, r1
 8000a86:	602b      	str	r3, [r5, #0]
 8000a88:	f7ff fd63 	bl	8000552 <_close>
 8000a8c:	1c43      	adds	r3, r0, #1
 8000a8e:	d102      	bne.n	8000a96 <_close_r+0x1a>
 8000a90:	682b      	ldr	r3, [r5, #0]
 8000a92:	b103      	cbz	r3, 8000a96 <_close_r+0x1a>
 8000a94:	6023      	str	r3, [r4, #0]
 8000a96:	bd38      	pop	{r3, r4, r5, pc}
 8000a98:	200001b8 	.word	0x200001b8

08000a9c <_lseek_r>:
 8000a9c:	b538      	push	{r3, r4, r5, lr}
 8000a9e:	4d07      	ldr	r5, [pc, #28]	@ (8000abc <_lseek_r+0x20>)
 8000aa0:	4604      	mov	r4, r0
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	602a      	str	r2, [r5, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	f7ff fd78 	bl	80005a0 <_lseek>
 8000ab0:	1c43      	adds	r3, r0, #1
 8000ab2:	d102      	bne.n	8000aba <_lseek_r+0x1e>
 8000ab4:	682b      	ldr	r3, [r5, #0]
 8000ab6:	b103      	cbz	r3, 8000aba <_lseek_r+0x1e>
 8000ab8:	6023      	str	r3, [r4, #0]
 8000aba:	bd38      	pop	{r3, r4, r5, pc}
 8000abc:	200001b8 	.word	0x200001b8

08000ac0 <_read_r>:
 8000ac0:	b538      	push	{r3, r4, r5, lr}
 8000ac2:	4d07      	ldr	r5, [pc, #28]	@ (8000ae0 <_read_r+0x20>)
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	4608      	mov	r0, r1
 8000ac8:	4611      	mov	r1, r2
 8000aca:	2200      	movs	r2, #0
 8000acc:	602a      	str	r2, [r5, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	f7ff fd06 	bl	80004e0 <_read>
 8000ad4:	1c43      	adds	r3, r0, #1
 8000ad6:	d102      	bne.n	8000ade <_read_r+0x1e>
 8000ad8:	682b      	ldr	r3, [r5, #0]
 8000ada:	b103      	cbz	r3, 8000ade <_read_r+0x1e>
 8000adc:	6023      	str	r3, [r4, #0]
 8000ade:	bd38      	pop	{r3, r4, r5, pc}
 8000ae0:	200001b8 	.word	0x200001b8

08000ae4 <_write_r>:
 8000ae4:	b538      	push	{r3, r4, r5, lr}
 8000ae6:	4d07      	ldr	r5, [pc, #28]	@ (8000b04 <_write_r+0x20>)
 8000ae8:	4604      	mov	r4, r0
 8000aea:	4608      	mov	r0, r1
 8000aec:	4611      	mov	r1, r2
 8000aee:	2200      	movs	r2, #0
 8000af0:	602a      	str	r2, [r5, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	f7ff fd11 	bl	800051a <_write>
 8000af8:	1c43      	adds	r3, r0, #1
 8000afa:	d102      	bne.n	8000b02 <_write_r+0x1e>
 8000afc:	682b      	ldr	r3, [r5, #0]
 8000afe:	b103      	cbz	r3, 8000b02 <_write_r+0x1e>
 8000b00:	6023      	str	r3, [r4, #0]
 8000b02:	bd38      	pop	{r3, r4, r5, pc}
 8000b04:	200001b8 	.word	0x200001b8

08000b08 <__errno>:
 8000b08:	4b01      	ldr	r3, [pc, #4]	@ (8000b10 <__errno+0x8>)
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	2000000c 	.word	0x2000000c

08000b14 <__libc_init_array>:
 8000b14:	b570      	push	{r4, r5, r6, lr}
 8000b16:	4d0d      	ldr	r5, [pc, #52]	@ (8000b4c <__libc_init_array+0x38>)
 8000b18:	4c0d      	ldr	r4, [pc, #52]	@ (8000b50 <__libc_init_array+0x3c>)
 8000b1a:	1b64      	subs	r4, r4, r5
 8000b1c:	10a4      	asrs	r4, r4, #2
 8000b1e:	2600      	movs	r6, #0
 8000b20:	42a6      	cmp	r6, r4
 8000b22:	d109      	bne.n	8000b38 <__libc_init_array+0x24>
 8000b24:	4d0b      	ldr	r5, [pc, #44]	@ (8000b54 <__libc_init_array+0x40>)
 8000b26:	4c0c      	ldr	r4, [pc, #48]	@ (8000b58 <__libc_init_array+0x44>)
 8000b28:	f000 fa54 	bl	8000fd4 <_init>
 8000b2c:	1b64      	subs	r4, r4, r5
 8000b2e:	10a4      	asrs	r4, r4, #2
 8000b30:	2600      	movs	r6, #0
 8000b32:	42a6      	cmp	r6, r4
 8000b34:	d105      	bne.n	8000b42 <__libc_init_array+0x2e>
 8000b36:	bd70      	pop	{r4, r5, r6, pc}
 8000b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b3c:	4798      	blx	r3
 8000b3e:	3601      	adds	r6, #1
 8000b40:	e7ee      	b.n	8000b20 <__libc_init_array+0xc>
 8000b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b46:	4798      	blx	r3
 8000b48:	3601      	adds	r6, #1
 8000b4a:	e7f2      	b.n	8000b32 <__libc_init_array+0x1e>
 8000b4c:	0800102c 	.word	0x0800102c
 8000b50:	0800102c 	.word	0x0800102c
 8000b54:	0800102c 	.word	0x0800102c
 8000b58:	08001030 	.word	0x08001030

08000b5c <__retarget_lock_init_recursive>:
 8000b5c:	4770      	bx	lr

08000b5e <__retarget_lock_acquire_recursive>:
 8000b5e:	4770      	bx	lr

08000b60 <__retarget_lock_release_recursive>:
 8000b60:	4770      	bx	lr
	...

08000b64 <_free_r>:
 8000b64:	b538      	push	{r3, r4, r5, lr}
 8000b66:	4605      	mov	r5, r0
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	d041      	beq.n	8000bf0 <_free_r+0x8c>
 8000b6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b70:	1f0c      	subs	r4, r1, #4
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	bfb8      	it	lt
 8000b76:	18e4      	addlt	r4, r4, r3
 8000b78:	f000 f8e0 	bl	8000d3c <__malloc_lock>
 8000b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf4 <_free_r+0x90>)
 8000b7e:	6813      	ldr	r3, [r2, #0]
 8000b80:	b933      	cbnz	r3, 8000b90 <_free_r+0x2c>
 8000b82:	6063      	str	r3, [r4, #4]
 8000b84:	6014      	str	r4, [r2, #0]
 8000b86:	4628      	mov	r0, r5
 8000b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b8c:	f000 b8dc 	b.w	8000d48 <__malloc_unlock>
 8000b90:	42a3      	cmp	r3, r4
 8000b92:	d908      	bls.n	8000ba6 <_free_r+0x42>
 8000b94:	6820      	ldr	r0, [r4, #0]
 8000b96:	1821      	adds	r1, r4, r0
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	bf01      	itttt	eq
 8000b9c:	6819      	ldreq	r1, [r3, #0]
 8000b9e:	685b      	ldreq	r3, [r3, #4]
 8000ba0:	1809      	addeq	r1, r1, r0
 8000ba2:	6021      	streq	r1, [r4, #0]
 8000ba4:	e7ed      	b.n	8000b82 <_free_r+0x1e>
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	b10b      	cbz	r3, 8000bb0 <_free_r+0x4c>
 8000bac:	42a3      	cmp	r3, r4
 8000bae:	d9fa      	bls.n	8000ba6 <_free_r+0x42>
 8000bb0:	6811      	ldr	r1, [r2, #0]
 8000bb2:	1850      	adds	r0, r2, r1
 8000bb4:	42a0      	cmp	r0, r4
 8000bb6:	d10b      	bne.n	8000bd0 <_free_r+0x6c>
 8000bb8:	6820      	ldr	r0, [r4, #0]
 8000bba:	4401      	add	r1, r0
 8000bbc:	1850      	adds	r0, r2, r1
 8000bbe:	4283      	cmp	r3, r0
 8000bc0:	6011      	str	r1, [r2, #0]
 8000bc2:	d1e0      	bne.n	8000b86 <_free_r+0x22>
 8000bc4:	6818      	ldr	r0, [r3, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	6053      	str	r3, [r2, #4]
 8000bca:	4408      	add	r0, r1
 8000bcc:	6010      	str	r0, [r2, #0]
 8000bce:	e7da      	b.n	8000b86 <_free_r+0x22>
 8000bd0:	d902      	bls.n	8000bd8 <_free_r+0x74>
 8000bd2:	230c      	movs	r3, #12
 8000bd4:	602b      	str	r3, [r5, #0]
 8000bd6:	e7d6      	b.n	8000b86 <_free_r+0x22>
 8000bd8:	6820      	ldr	r0, [r4, #0]
 8000bda:	1821      	adds	r1, r4, r0
 8000bdc:	428b      	cmp	r3, r1
 8000bde:	bf04      	itt	eq
 8000be0:	6819      	ldreq	r1, [r3, #0]
 8000be2:	685b      	ldreq	r3, [r3, #4]
 8000be4:	6063      	str	r3, [r4, #4]
 8000be6:	bf04      	itt	eq
 8000be8:	1809      	addeq	r1, r1, r0
 8000bea:	6021      	streq	r1, [r4, #0]
 8000bec:	6054      	str	r4, [r2, #4]
 8000bee:	e7ca      	b.n	8000b86 <_free_r+0x22>
 8000bf0:	bd38      	pop	{r3, r4, r5, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200001c4 	.word	0x200001c4

08000bf8 <sbrk_aligned>:
 8000bf8:	b570      	push	{r4, r5, r6, lr}
 8000bfa:	4e0f      	ldr	r6, [pc, #60]	@ (8000c38 <sbrk_aligned+0x40>)
 8000bfc:	460c      	mov	r4, r1
 8000bfe:	6831      	ldr	r1, [r6, #0]
 8000c00:	4605      	mov	r5, r0
 8000c02:	b911      	cbnz	r1, 8000c0a <sbrk_aligned+0x12>
 8000c04:	f000 f9d6 	bl	8000fb4 <_sbrk_r>
 8000c08:	6030      	str	r0, [r6, #0]
 8000c0a:	4621      	mov	r1, r4
 8000c0c:	4628      	mov	r0, r5
 8000c0e:	f000 f9d1 	bl	8000fb4 <_sbrk_r>
 8000c12:	1c43      	adds	r3, r0, #1
 8000c14:	d103      	bne.n	8000c1e <sbrk_aligned+0x26>
 8000c16:	f04f 34ff 	mov.w	r4, #4294967295
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	bd70      	pop	{r4, r5, r6, pc}
 8000c1e:	1cc4      	adds	r4, r0, #3
 8000c20:	f024 0403 	bic.w	r4, r4, #3
 8000c24:	42a0      	cmp	r0, r4
 8000c26:	d0f8      	beq.n	8000c1a <sbrk_aligned+0x22>
 8000c28:	1a21      	subs	r1, r4, r0
 8000c2a:	4628      	mov	r0, r5
 8000c2c:	f000 f9c2 	bl	8000fb4 <_sbrk_r>
 8000c30:	3001      	adds	r0, #1
 8000c32:	d1f2      	bne.n	8000c1a <sbrk_aligned+0x22>
 8000c34:	e7ef      	b.n	8000c16 <sbrk_aligned+0x1e>
 8000c36:	bf00      	nop
 8000c38:	200001c0 	.word	0x200001c0

08000c3c <_malloc_r>:
 8000c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c40:	1ccd      	adds	r5, r1, #3
 8000c42:	f025 0503 	bic.w	r5, r5, #3
 8000c46:	3508      	adds	r5, #8
 8000c48:	2d0c      	cmp	r5, #12
 8000c4a:	bf38      	it	cc
 8000c4c:	250c      	movcc	r5, #12
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	4606      	mov	r6, r0
 8000c52:	db01      	blt.n	8000c58 <_malloc_r+0x1c>
 8000c54:	42a9      	cmp	r1, r5
 8000c56:	d904      	bls.n	8000c62 <_malloc_r+0x26>
 8000c58:	230c      	movs	r3, #12
 8000c5a:	6033      	str	r3, [r6, #0]
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d38 <_malloc_r+0xfc>
 8000c66:	f000 f869 	bl	8000d3c <__malloc_lock>
 8000c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8000c6e:	461c      	mov	r4, r3
 8000c70:	bb44      	cbnz	r4, 8000cc4 <_malloc_r+0x88>
 8000c72:	4629      	mov	r1, r5
 8000c74:	4630      	mov	r0, r6
 8000c76:	f7ff ffbf 	bl	8000bf8 <sbrk_aligned>
 8000c7a:	1c43      	adds	r3, r0, #1
 8000c7c:	4604      	mov	r4, r0
 8000c7e:	d158      	bne.n	8000d32 <_malloc_r+0xf6>
 8000c80:	f8d8 4000 	ldr.w	r4, [r8]
 8000c84:	4627      	mov	r7, r4
 8000c86:	2f00      	cmp	r7, #0
 8000c88:	d143      	bne.n	8000d12 <_malloc_r+0xd6>
 8000c8a:	2c00      	cmp	r4, #0
 8000c8c:	d04b      	beq.n	8000d26 <_malloc_r+0xea>
 8000c8e:	6823      	ldr	r3, [r4, #0]
 8000c90:	4639      	mov	r1, r7
 8000c92:	4630      	mov	r0, r6
 8000c94:	eb04 0903 	add.w	r9, r4, r3
 8000c98:	f000 f98c 	bl	8000fb4 <_sbrk_r>
 8000c9c:	4581      	cmp	r9, r0
 8000c9e:	d142      	bne.n	8000d26 <_malloc_r+0xea>
 8000ca0:	6821      	ldr	r1, [r4, #0]
 8000ca2:	1a6d      	subs	r5, r5, r1
 8000ca4:	4629      	mov	r1, r5
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	f7ff ffa6 	bl	8000bf8 <sbrk_aligned>
 8000cac:	3001      	adds	r0, #1
 8000cae:	d03a      	beq.n	8000d26 <_malloc_r+0xea>
 8000cb0:	6823      	ldr	r3, [r4, #0]
 8000cb2:	442b      	add	r3, r5
 8000cb4:	6023      	str	r3, [r4, #0]
 8000cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	bb62      	cbnz	r2, 8000d18 <_malloc_r+0xdc>
 8000cbe:	f8c8 7000 	str.w	r7, [r8]
 8000cc2:	e00f      	b.n	8000ce4 <_malloc_r+0xa8>
 8000cc4:	6822      	ldr	r2, [r4, #0]
 8000cc6:	1b52      	subs	r2, r2, r5
 8000cc8:	d420      	bmi.n	8000d0c <_malloc_r+0xd0>
 8000cca:	2a0b      	cmp	r2, #11
 8000ccc:	d917      	bls.n	8000cfe <_malloc_r+0xc2>
 8000cce:	1961      	adds	r1, r4, r5
 8000cd0:	42a3      	cmp	r3, r4
 8000cd2:	6025      	str	r5, [r4, #0]
 8000cd4:	bf18      	it	ne
 8000cd6:	6059      	strne	r1, [r3, #4]
 8000cd8:	6863      	ldr	r3, [r4, #4]
 8000cda:	bf08      	it	eq
 8000cdc:	f8c8 1000 	streq.w	r1, [r8]
 8000ce0:	5162      	str	r2, [r4, r5]
 8000ce2:	604b      	str	r3, [r1, #4]
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	f000 f82f 	bl	8000d48 <__malloc_unlock>
 8000cea:	f104 000b 	add.w	r0, r4, #11
 8000cee:	1d23      	adds	r3, r4, #4
 8000cf0:	f020 0007 	bic.w	r0, r0, #7
 8000cf4:	1ac2      	subs	r2, r0, r3
 8000cf6:	bf1c      	itt	ne
 8000cf8:	1a1b      	subne	r3, r3, r0
 8000cfa:	50a3      	strne	r3, [r4, r2]
 8000cfc:	e7af      	b.n	8000c5e <_malloc_r+0x22>
 8000cfe:	6862      	ldr	r2, [r4, #4]
 8000d00:	42a3      	cmp	r3, r4
 8000d02:	bf0c      	ite	eq
 8000d04:	f8c8 2000 	streq.w	r2, [r8]
 8000d08:	605a      	strne	r2, [r3, #4]
 8000d0a:	e7eb      	b.n	8000ce4 <_malloc_r+0xa8>
 8000d0c:	4623      	mov	r3, r4
 8000d0e:	6864      	ldr	r4, [r4, #4]
 8000d10:	e7ae      	b.n	8000c70 <_malloc_r+0x34>
 8000d12:	463c      	mov	r4, r7
 8000d14:	687f      	ldr	r7, [r7, #4]
 8000d16:	e7b6      	b.n	8000c86 <_malloc_r+0x4a>
 8000d18:	461a      	mov	r2, r3
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d1fb      	bne.n	8000d18 <_malloc_r+0xdc>
 8000d20:	2300      	movs	r3, #0
 8000d22:	6053      	str	r3, [r2, #4]
 8000d24:	e7de      	b.n	8000ce4 <_malloc_r+0xa8>
 8000d26:	230c      	movs	r3, #12
 8000d28:	6033      	str	r3, [r6, #0]
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	f000 f80c 	bl	8000d48 <__malloc_unlock>
 8000d30:	e794      	b.n	8000c5c <_malloc_r+0x20>
 8000d32:	6005      	str	r5, [r0, #0]
 8000d34:	e7d6      	b.n	8000ce4 <_malloc_r+0xa8>
 8000d36:	bf00      	nop
 8000d38:	200001c4 	.word	0x200001c4

08000d3c <__malloc_lock>:
 8000d3c:	4801      	ldr	r0, [pc, #4]	@ (8000d44 <__malloc_lock+0x8>)
 8000d3e:	f7ff bf0e 	b.w	8000b5e <__retarget_lock_acquire_recursive>
 8000d42:	bf00      	nop
 8000d44:	200001bc 	.word	0x200001bc

08000d48 <__malloc_unlock>:
 8000d48:	4801      	ldr	r0, [pc, #4]	@ (8000d50 <__malloc_unlock+0x8>)
 8000d4a:	f7ff bf09 	b.w	8000b60 <__retarget_lock_release_recursive>
 8000d4e:	bf00      	nop
 8000d50:	200001bc 	.word	0x200001bc

08000d54 <__sflush_r>:
 8000d54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d5c:	0716      	lsls	r6, r2, #28
 8000d5e:	4605      	mov	r5, r0
 8000d60:	460c      	mov	r4, r1
 8000d62:	d454      	bmi.n	8000e0e <__sflush_r+0xba>
 8000d64:	684b      	ldr	r3, [r1, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	dc02      	bgt.n	8000d70 <__sflush_r+0x1c>
 8000d6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	dd48      	ble.n	8000e02 <__sflush_r+0xae>
 8000d70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d045      	beq.n	8000e02 <__sflush_r+0xae>
 8000d76:	2300      	movs	r3, #0
 8000d78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000d7c:	682f      	ldr	r7, [r5, #0]
 8000d7e:	6a21      	ldr	r1, [r4, #32]
 8000d80:	602b      	str	r3, [r5, #0]
 8000d82:	d030      	beq.n	8000de6 <__sflush_r+0x92>
 8000d84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000d86:	89a3      	ldrh	r3, [r4, #12]
 8000d88:	0759      	lsls	r1, r3, #29
 8000d8a:	d505      	bpl.n	8000d98 <__sflush_r+0x44>
 8000d8c:	6863      	ldr	r3, [r4, #4]
 8000d8e:	1ad2      	subs	r2, r2, r3
 8000d90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000d92:	b10b      	cbz	r3, 8000d98 <__sflush_r+0x44>
 8000d94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d96:	1ad2      	subs	r2, r2, r3
 8000d98:	2300      	movs	r3, #0
 8000d9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000d9c:	6a21      	ldr	r1, [r4, #32]
 8000d9e:	4628      	mov	r0, r5
 8000da0:	47b0      	blx	r6
 8000da2:	1c43      	adds	r3, r0, #1
 8000da4:	89a3      	ldrh	r3, [r4, #12]
 8000da6:	d106      	bne.n	8000db6 <__sflush_r+0x62>
 8000da8:	6829      	ldr	r1, [r5, #0]
 8000daa:	291d      	cmp	r1, #29
 8000dac:	d82b      	bhi.n	8000e06 <__sflush_r+0xb2>
 8000dae:	4a2a      	ldr	r2, [pc, #168]	@ (8000e58 <__sflush_r+0x104>)
 8000db0:	40ca      	lsrs	r2, r1
 8000db2:	07d6      	lsls	r6, r2, #31
 8000db4:	d527      	bpl.n	8000e06 <__sflush_r+0xb2>
 8000db6:	2200      	movs	r2, #0
 8000db8:	6062      	str	r2, [r4, #4]
 8000dba:	04d9      	lsls	r1, r3, #19
 8000dbc:	6922      	ldr	r2, [r4, #16]
 8000dbe:	6022      	str	r2, [r4, #0]
 8000dc0:	d504      	bpl.n	8000dcc <__sflush_r+0x78>
 8000dc2:	1c42      	adds	r2, r0, #1
 8000dc4:	d101      	bne.n	8000dca <__sflush_r+0x76>
 8000dc6:	682b      	ldr	r3, [r5, #0]
 8000dc8:	b903      	cbnz	r3, 8000dcc <__sflush_r+0x78>
 8000dca:	6560      	str	r0, [r4, #84]	@ 0x54
 8000dcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000dce:	602f      	str	r7, [r5, #0]
 8000dd0:	b1b9      	cbz	r1, 8000e02 <__sflush_r+0xae>
 8000dd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000dd6:	4299      	cmp	r1, r3
 8000dd8:	d002      	beq.n	8000de0 <__sflush_r+0x8c>
 8000dda:	4628      	mov	r0, r5
 8000ddc:	f7ff fec2 	bl	8000b64 <_free_r>
 8000de0:	2300      	movs	r3, #0
 8000de2:	6363      	str	r3, [r4, #52]	@ 0x34
 8000de4:	e00d      	b.n	8000e02 <__sflush_r+0xae>
 8000de6:	2301      	movs	r3, #1
 8000de8:	4628      	mov	r0, r5
 8000dea:	47b0      	blx	r6
 8000dec:	4602      	mov	r2, r0
 8000dee:	1c50      	adds	r0, r2, #1
 8000df0:	d1c9      	bne.n	8000d86 <__sflush_r+0x32>
 8000df2:	682b      	ldr	r3, [r5, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0c6      	beq.n	8000d86 <__sflush_r+0x32>
 8000df8:	2b1d      	cmp	r3, #29
 8000dfa:	d001      	beq.n	8000e00 <__sflush_r+0xac>
 8000dfc:	2b16      	cmp	r3, #22
 8000dfe:	d11e      	bne.n	8000e3e <__sflush_r+0xea>
 8000e00:	602f      	str	r7, [r5, #0]
 8000e02:	2000      	movs	r0, #0
 8000e04:	e022      	b.n	8000e4c <__sflush_r+0xf8>
 8000e06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	e01b      	b.n	8000e46 <__sflush_r+0xf2>
 8000e0e:	690f      	ldr	r7, [r1, #16]
 8000e10:	2f00      	cmp	r7, #0
 8000e12:	d0f6      	beq.n	8000e02 <__sflush_r+0xae>
 8000e14:	0793      	lsls	r3, r2, #30
 8000e16:	680e      	ldr	r6, [r1, #0]
 8000e18:	bf08      	it	eq
 8000e1a:	694b      	ldreq	r3, [r1, #20]
 8000e1c:	600f      	str	r7, [r1, #0]
 8000e1e:	bf18      	it	ne
 8000e20:	2300      	movne	r3, #0
 8000e22:	eba6 0807 	sub.w	r8, r6, r7
 8000e26:	608b      	str	r3, [r1, #8]
 8000e28:	f1b8 0f00 	cmp.w	r8, #0
 8000e2c:	dde9      	ble.n	8000e02 <__sflush_r+0xae>
 8000e2e:	6a21      	ldr	r1, [r4, #32]
 8000e30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000e32:	4643      	mov	r3, r8
 8000e34:	463a      	mov	r2, r7
 8000e36:	4628      	mov	r0, r5
 8000e38:	47b0      	blx	r6
 8000e3a:	2800      	cmp	r0, #0
 8000e3c:	dc08      	bgt.n	8000e50 <__sflush_r+0xfc>
 8000e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e46:	81a3      	strh	r3, [r4, #12]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e50:	4407      	add	r7, r0
 8000e52:	eba8 0800 	sub.w	r8, r8, r0
 8000e56:	e7e7      	b.n	8000e28 <__sflush_r+0xd4>
 8000e58:	20400001 	.word	0x20400001

08000e5c <_fflush_r>:
 8000e5c:	b538      	push	{r3, r4, r5, lr}
 8000e5e:	690b      	ldr	r3, [r1, #16]
 8000e60:	4605      	mov	r5, r0
 8000e62:	460c      	mov	r4, r1
 8000e64:	b913      	cbnz	r3, 8000e6c <_fflush_r+0x10>
 8000e66:	2500      	movs	r5, #0
 8000e68:	4628      	mov	r0, r5
 8000e6a:	bd38      	pop	{r3, r4, r5, pc}
 8000e6c:	b118      	cbz	r0, 8000e76 <_fflush_r+0x1a>
 8000e6e:	6a03      	ldr	r3, [r0, #32]
 8000e70:	b90b      	cbnz	r3, 8000e76 <_fflush_r+0x1a>
 8000e72:	f7ff fc8f 	bl	8000794 <__sinit>
 8000e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f3      	beq.n	8000e66 <_fflush_r+0xa>
 8000e7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000e80:	07d0      	lsls	r0, r2, #31
 8000e82:	d404      	bmi.n	8000e8e <_fflush_r+0x32>
 8000e84:	0599      	lsls	r1, r3, #22
 8000e86:	d402      	bmi.n	8000e8e <_fflush_r+0x32>
 8000e88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e8a:	f7ff fe68 	bl	8000b5e <__retarget_lock_acquire_recursive>
 8000e8e:	4628      	mov	r0, r5
 8000e90:	4621      	mov	r1, r4
 8000e92:	f7ff ff5f 	bl	8000d54 <__sflush_r>
 8000e96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000e98:	07da      	lsls	r2, r3, #31
 8000e9a:	4605      	mov	r5, r0
 8000e9c:	d4e4      	bmi.n	8000e68 <_fflush_r+0xc>
 8000e9e:	89a3      	ldrh	r3, [r4, #12]
 8000ea0:	059b      	lsls	r3, r3, #22
 8000ea2:	d4e1      	bmi.n	8000e68 <_fflush_r+0xc>
 8000ea4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000ea6:	f7ff fe5b 	bl	8000b60 <__retarget_lock_release_recursive>
 8000eaa:	e7dd      	b.n	8000e68 <_fflush_r+0xc>

08000eac <__swhatbuf_r>:
 8000eac:	b570      	push	{r4, r5, r6, lr}
 8000eae:	460c      	mov	r4, r1
 8000eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000eb4:	2900      	cmp	r1, #0
 8000eb6:	b096      	sub	sp, #88	@ 0x58
 8000eb8:	4615      	mov	r5, r2
 8000eba:	461e      	mov	r6, r3
 8000ebc:	da0d      	bge.n	8000eda <__swhatbuf_r+0x2e>
 8000ebe:	89a3      	ldrh	r3, [r4, #12]
 8000ec0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000ec4:	f04f 0100 	mov.w	r1, #0
 8000ec8:	bf14      	ite	ne
 8000eca:	2340      	movne	r3, #64	@ 0x40
 8000ecc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	6031      	str	r1, [r6, #0]
 8000ed4:	602b      	str	r3, [r5, #0]
 8000ed6:	b016      	add	sp, #88	@ 0x58
 8000ed8:	bd70      	pop	{r4, r5, r6, pc}
 8000eda:	466a      	mov	r2, sp
 8000edc:	f000 f848 	bl	8000f70 <_fstat_r>
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	dbec      	blt.n	8000ebe <__swhatbuf_r+0x12>
 8000ee4:	9901      	ldr	r1, [sp, #4]
 8000ee6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000eea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000eee:	4259      	negs	r1, r3
 8000ef0:	4159      	adcs	r1, r3
 8000ef2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ef6:	e7eb      	b.n	8000ed0 <__swhatbuf_r+0x24>

08000ef8 <__smakebuf_r>:
 8000ef8:	898b      	ldrh	r3, [r1, #12]
 8000efa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000efc:	079d      	lsls	r5, r3, #30
 8000efe:	4606      	mov	r6, r0
 8000f00:	460c      	mov	r4, r1
 8000f02:	d507      	bpl.n	8000f14 <__smakebuf_r+0x1c>
 8000f04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000f08:	6023      	str	r3, [r4, #0]
 8000f0a:	6123      	str	r3, [r4, #16]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	6163      	str	r3, [r4, #20]
 8000f10:	b003      	add	sp, #12
 8000f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f14:	ab01      	add	r3, sp, #4
 8000f16:	466a      	mov	r2, sp
 8000f18:	f7ff ffc8 	bl	8000eac <__swhatbuf_r>
 8000f1c:	9f00      	ldr	r7, [sp, #0]
 8000f1e:	4605      	mov	r5, r0
 8000f20:	4639      	mov	r1, r7
 8000f22:	4630      	mov	r0, r6
 8000f24:	f7ff fe8a 	bl	8000c3c <_malloc_r>
 8000f28:	b948      	cbnz	r0, 8000f3e <__smakebuf_r+0x46>
 8000f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f2e:	059a      	lsls	r2, r3, #22
 8000f30:	d4ee      	bmi.n	8000f10 <__smakebuf_r+0x18>
 8000f32:	f023 0303 	bic.w	r3, r3, #3
 8000f36:	f043 0302 	orr.w	r3, r3, #2
 8000f3a:	81a3      	strh	r3, [r4, #12]
 8000f3c:	e7e2      	b.n	8000f04 <__smakebuf_r+0xc>
 8000f3e:	89a3      	ldrh	r3, [r4, #12]
 8000f40:	6020      	str	r0, [r4, #0]
 8000f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f46:	81a3      	strh	r3, [r4, #12]
 8000f48:	9b01      	ldr	r3, [sp, #4]
 8000f4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000f4e:	b15b      	cbz	r3, 8000f68 <__smakebuf_r+0x70>
 8000f50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f54:	4630      	mov	r0, r6
 8000f56:	f000 f81d 	bl	8000f94 <_isatty_r>
 8000f5a:	b128      	cbz	r0, 8000f68 <__smakebuf_r+0x70>
 8000f5c:	89a3      	ldrh	r3, [r4, #12]
 8000f5e:	f023 0303 	bic.w	r3, r3, #3
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	81a3      	strh	r3, [r4, #12]
 8000f68:	89a3      	ldrh	r3, [r4, #12]
 8000f6a:	431d      	orrs	r5, r3
 8000f6c:	81a5      	strh	r5, [r4, #12]
 8000f6e:	e7cf      	b.n	8000f10 <__smakebuf_r+0x18>

08000f70 <_fstat_r>:
 8000f70:	b538      	push	{r3, r4, r5, lr}
 8000f72:	4d07      	ldr	r5, [pc, #28]	@ (8000f90 <_fstat_r+0x20>)
 8000f74:	2300      	movs	r3, #0
 8000f76:	4604      	mov	r4, r0
 8000f78:	4608      	mov	r0, r1
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	602b      	str	r3, [r5, #0]
 8000f7e:	f7ff faf4 	bl	800056a <_fstat>
 8000f82:	1c43      	adds	r3, r0, #1
 8000f84:	d102      	bne.n	8000f8c <_fstat_r+0x1c>
 8000f86:	682b      	ldr	r3, [r5, #0]
 8000f88:	b103      	cbz	r3, 8000f8c <_fstat_r+0x1c>
 8000f8a:	6023      	str	r3, [r4, #0]
 8000f8c:	bd38      	pop	{r3, r4, r5, pc}
 8000f8e:	bf00      	nop
 8000f90:	200001b8 	.word	0x200001b8

08000f94 <_isatty_r>:
 8000f94:	b538      	push	{r3, r4, r5, lr}
 8000f96:	4d06      	ldr	r5, [pc, #24]	@ (8000fb0 <_isatty_r+0x1c>)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	602b      	str	r3, [r5, #0]
 8000fa0:	f7ff faf3 	bl	800058a <_isatty>
 8000fa4:	1c43      	adds	r3, r0, #1
 8000fa6:	d102      	bne.n	8000fae <_isatty_r+0x1a>
 8000fa8:	682b      	ldr	r3, [r5, #0]
 8000faa:	b103      	cbz	r3, 8000fae <_isatty_r+0x1a>
 8000fac:	6023      	str	r3, [r4, #0]
 8000fae:	bd38      	pop	{r3, r4, r5, pc}
 8000fb0:	200001b8 	.word	0x200001b8

08000fb4 <_sbrk_r>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	4d06      	ldr	r5, [pc, #24]	@ (8000fd0 <_sbrk_r+0x1c>)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	602b      	str	r3, [r5, #0]
 8000fc0:	f7ff fafc 	bl	80005bc <_sbrk>
 8000fc4:	1c43      	adds	r3, r0, #1
 8000fc6:	d102      	bne.n	8000fce <_sbrk_r+0x1a>
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	b103      	cbz	r3, 8000fce <_sbrk_r+0x1a>
 8000fcc:	6023      	str	r3, [r4, #0]
 8000fce:	bd38      	pop	{r3, r4, r5, pc}
 8000fd0:	200001b8 	.word	0x200001b8

08000fd4 <_init>:
 8000fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fd6:	bf00      	nop
 8000fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fda:	bc08      	pop	{r3}
 8000fdc:	469e      	mov	lr, r3
 8000fde:	4770      	bx	lr

08000fe0 <_fini>:
 8000fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe2:	bf00      	nop
 8000fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fe6:	bc08      	pop	{r3}
 8000fe8:	469e      	mov	lr, r3
 8000fea:	4770      	bx	lr
